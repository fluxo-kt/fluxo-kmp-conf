
# ProGuard/R8 keep rules
# Auto-generated by Fluxo task :generateShrinkerKeepRulesFromApi from API reports:
# - api\plugin.api
# DO NOT EDIT MANUALLY!

-keep,allowoptimization public final class DependencyUtilsKt {
    public static final org.gradle.api.artifacts.Dependency ksp(org.jetbrains.kotlin.gradle.plugin.KotlinDependencyHandler, java.lang.Object);
    public static final org.gradle.api.provider.Provider toModuleDependency(org.gradle.api.provider.Provider);
    public static final java.lang.String toModuleDependency(org.gradle.plugin.use.PluginDependency);
}

-keep,allowoptimization public final class KmpHierarchyTemplateKt {
    public static final kotlin.jvm.functions.Function1 getFluxoKmpConf(org.jetbrains.kotlin.gradle.plugin.KotlinHierarchyTemplate$Templates);
}

-keep,allowoptimization public final class MultiplatformSourceSetUtilsKt {
    public static final kotlin.properties.PropertyDelegateProvider bundle(org.gradle.api.NamedDomainObjectContainer, java.lang.String);
    public static final fluxo.conf.kmp.SourceSetBundle bundle(org.gradle.api.NamedDomainObjectContainer, java.lang.String, java.lang.Boolean);
    public static final kotlin.properties.PropertyDelegateProvider bundle(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer, java.lang.String);
    public static final fluxo.conf.kmp.SourceSetBundle bundle(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer, java.lang.String, java.lang.Boolean);
    public static synthetic kotlin.properties.PropertyDelegateProvider bundle$default(org.gradle.api.NamedDomainObjectContainer, java.lang.String, int, java.lang.Object);
    public static synthetic fluxo.conf.kmp.SourceSetBundle bundle$default(org.gradle.api.NamedDomainObjectContainer, java.lang.String, java.lang.Boolean, int, java.lang.Object);
    public static synthetic kotlin.properties.PropertyDelegateProvider bundle$default(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer, java.lang.String, int, java.lang.Object);
    public static synthetic fluxo.conf.kmp.SourceSetBundle bundle$default(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer, java.lang.String, java.lang.Boolean, int, java.lang.Object);
    public static final void commonCompileOnly(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer, java.lang.Object, org.gradle.api.Project, boolean);
    public static synthetic void commonCompileOnly$default(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer, java.lang.Object, org.gradle.api.Project, boolean, int, java.lang.Object);
    public static final void dependencies(java.lang.Iterable, kotlin.jvm.functions.Function1);
    public static final void dependsOn(fluxo.conf.kmp.SourceSetBundle, fluxo.conf.kmp.SourceSetBundle);
    public static final void dependsOn(fluxo.conf.kmp.SourceSetBundle, java.lang.Iterable);
    public static final void dependsOn(java.lang.Iterable, fluxo.conf.kmp.SourceSetBundle);
    public static final void dependsOn(java.lang.Iterable, java.lang.Iterable);
    public static final void dependsOn(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet, fluxo.conf.kmp.SourceSetBundle);
    public static final void dependsOn(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet, java.lang.Iterable);
    public static final void dependsOnBundles(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet, java.lang.Iterable);
    public static final java.util.Set getAllSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getAllTargetsSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getAndroidNativeSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getAndroidSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getAppleSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommon(org.gradle.api.NamedDomainObjectCollection);
    public static final fluxo.conf.kmp.SourceSetBundle getCommon(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonApple(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonIos(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonJs(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonJvm(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonLinux(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonMacos(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonMingw(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonNative(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonNonJvm(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonTvos(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonUnix(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonWasm(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonWasmNative(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final fluxo.conf.kmp.SourceSetBundle getCommonWatchos(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getDarwinSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getIosSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getJavaSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getJsSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getLinuxSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getMacosSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.List getMain(java.lang.Iterable);
    public static final java.util.Set getMingwSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getNativeSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.List getTest(java.lang.Iterable);
    public static final java.util.Set getTvosSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getWasmNativeSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set getWatchosSet(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer);
    public static final java.util.Set plus(fluxo.conf.kmp.SourceSetBundle, fluxo.conf.kmp.SourceSetBundle);
    public static final java.util.Set plus(fluxo.conf.kmp.SourceSetBundle, java.util.Set);
}

-keep,allowoptimization public final class PropsAndEnvKt {
    public static final org.gradle.api.provider.Provider areComposeMetricsEnabled(org.gradle.api.Project);
    public static final java.lang.String buildNumber(org.gradle.api.Project);
    public static final java.lang.String buildNumberSuffix(org.gradle.api.Project, java.lang.String, java.lang.String);
    public static synthetic java.lang.String buildNumberSuffix$default(org.gradle.api.Project, java.lang.String, java.lang.String, int, java.lang.Object);
    public static final org.gradle.api.provider.Provider disableTests(org.gradle.api.Project);
    public static final java.lang.Integer envOrPropInt(org.gradle.api.Project, java.lang.String);
    public static final java.util.List envOrPropList(org.gradle.api.Project, java.lang.String);
    public static final java.lang.String envOrPropValue(org.gradle.api.Project, java.lang.String);
    public static final java.lang.Object getValue(org.gradle.api.provider.Provider, java.lang.Object, java.lang.Object);
    public static final boolean getValue(org.gradle.api.provider.Provider, java.lang.Object, java.lang.Object);
    public static final java.lang.Object getValueOrNull(org.gradle.api.provider.Provider, java.lang.Object, java.lang.Object);
    public static final org.gradle.api.provider.Provider isCI(org.gradle.api.Project);
    public static final org.gradle.api.provider.Provider isDesugaringEnabled(org.gradle.api.Project);
    public static final org.gradle.api.provider.Provider isMaxDebugEnabled(org.gradle.api.Project);
    public static final org.gradle.api.provider.Provider isR8Disabled(org.gradle.api.Project);
    public static final org.gradle.api.provider.Provider isRelease(org.gradle.api.Project);
    public static final org.gradle.api.provider.Provider scmTag(org.gradle.api.Project, boolean);
    public static synthetic org.gradle.api.provider.Provider scmTag$default(org.gradle.api.Project, boolean, int, java.lang.Object);
    public static final java.lang.String signingKey(org.gradle.api.Project);
    public static final org.gradle.api.provider.Provider useKotlinDebug(org.gradle.api.Project);
}

-keep,allowoptimization public final class SetupAndroidKt {
    public static final void setupAndroidApp(org.gradle.api.Project, java.lang.String, int, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1);
    public static synthetic void setupAndroidApp$default(org.gradle.api.Project, java.lang.String, int, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public static final void setupAndroidLibrary(org.gradle.api.Project, kotlin.jvm.functions.Function1, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, kotlin.jvm.functions.Function1);
    public static synthetic void setupAndroidLibrary$default(org.gradle.api.Project, kotlin.jvm.functions.Function1, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public final class SetupGradlePluginKt {
    public static final void setupGradlePlugin(org.gradle.api.Project, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List, java.lang.String, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1);
    public static synthetic void setupGradlePlugin$default(org.gradle.api.Project, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List, java.lang.String, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public final class SetupIdeaPluginKt {
    public static final void setupIdeaPlugin(org.gradle.api.Project, kotlin.jvm.functions.Function1, java.lang.String, java.lang.String, java.lang.String, java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void setupIdeaPlugin$default(org.gradle.api.Project, kotlin.jvm.functions.Function1, java.lang.String, java.lang.String, java.lang.String, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public final class SetupKotlinJsKt {
    public static final kotlin.jvm.functions.Function1 getDEFAULT_COMMON_JS_CONF();
    public static final void testTimeout(org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinJsSubTargetDsl, int);
    public static synthetic void testTimeout$default(org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinJsSubTargetDsl, int, int, java.lang.Object);
}

-keep,allowoptimization public final class SetupKotlinKt {
    public static final void setupKotlin(org.gradle.api.Project, kotlin.jvm.functions.Function1, java.lang.Boolean, java.util.List, kotlin.jvm.functions.Function1);
    public static synthetic void setupKotlin$default(org.gradle.api.Project, kotlin.jvm.functions.Function1, java.lang.Boolean, java.util.List, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public final class SetupMultiplatformKt {
    public static final void iosCompat(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension, java.lang.String, java.lang.String, java.lang.String);
    public static synthetic void iosCompat$default(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension, java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object);
    public static final void macosCompat(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension, java.lang.String, java.lang.String);
    public static synthetic void macosCompat$default(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension, java.lang.String, java.lang.String, int, java.lang.Object);
    public static final void setupBackgroundNativeTests(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension);
    public static final void setupMultiplatform(org.gradle.api.Project, kotlin.jvm.functions.Function1, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.util.List, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1);
    public static synthetic void setupMultiplatform$default(org.gradle.api.Project, kotlin.jvm.functions.Function1, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.util.List, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public static final void tvosCompat(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension, java.lang.String, java.lang.String, java.lang.String);
    public static synthetic void tvosCompat$default(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension, java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object);
    public static final void watchosCompat(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    public static synthetic void watchosCompat$default(org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object);
}

-keep,allowoptimization public final class fluxo.conf.FluxoKmpConfPlugin {
    public <init>();
    public synthetic void apply(java.lang.Object);
    public void apply(org.gradle.api.Project);
}

-keep,allowoptimization public final class fluxo.conf.dsl.BinaryCompatibilityValidatorConfig {
    public <init>();
    public <init>(java.util.Set, java.util.Set, java.util.Set, boolean, boolean, boolean, java.lang.Integer);
    public synthetic <init>(java.util.Set, java.util.Set, java.util.Set, boolean, boolean, boolean, java.lang.Integer, int, kotlin.jvm.internal.DefaultConstructorMarker);
    public final boolean getDisableForNonRelease();
    public final java.util.Set getIgnoredClasses();
    public final java.util.Set getIgnoredPackages();
    public final boolean getJsApiChecks();
    public final java.lang.Integer getKlibSignatureVersion();
    public final boolean getKlibValidationEnabled();
    public final java.util.Set getNonPublicMarkers();
    public final void setDisableForNonRelease(boolean);
    public final void setIgnoredClasses(java.util.Set);
    public final void setIgnoredPackages(java.util.Set);
    public final void setJsApiChecks(boolean);
    public final void setKlibSignatureVersion(java.lang.Integer);
    public final void setKlibValidationEnabled(boolean);
    public final void setNonPublicMarkers(java.util.Set);
}

-keep,allowoptimization public interface fluxo.conf.dsl.FluxoConfigurationExtension {
    public static final fluxo.conf.dsl.FluxoConfigurationExtension$Companion Companion;
    public static final java.lang.String NAME;
    public abstract void asAndroid(boolean, kotlin.jvm.functions.Function1);
    public static synthetic void asAndroid$default(fluxo.conf.dsl.FluxoConfigurationExtension, boolean, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void asGradlePlugin(kotlin.jvm.functions.Function1);
    public static synthetic void asGradlePlugin$default(fluxo.conf.dsl.FluxoConfigurationExtension, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void asIdeaPlugin(kotlin.jvm.functions.Function1);
    public static synthetic void asIdeaPlugin$default(fluxo.conf.dsl.FluxoConfigurationExtension, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void asJvm(kotlin.jvm.functions.Function1);
    public static synthetic void asJvm$default(fluxo.conf.dsl.FluxoConfigurationExtension, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void asKmp(kotlin.jvm.functions.Function1);
    public static synthetic void asKmp$default(fluxo.conf.dsl.FluxoConfigurationExtension, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public void asMultiplatform(kotlin.jvm.functions.Function1);
    public static synthetic void asMultiplatform$default(fluxo.conf.dsl.FluxoConfigurationExtension, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public void configure(kotlin.jvm.functions.Function1);
    public static synthetic void configure$default(fluxo.conf.dsl.FluxoConfigurationExtension, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public void configureAsLibrary();
    public abstract void defaults(kotlin.jvm.functions.Function1);
    public abstract boolean getSkipDefaultConfigurations();
    public abstract void setSkipDefaultConfigurations(boolean);
}

-keep,allowoptimization public final class fluxo.conf.dsl.FluxoConfigurationExtension$Companion {
    public static final java.lang.String NAME;
}

-keep,allowoptimization public interface fluxo.conf.dsl.FluxoConfigurationExtensionAndroid {
    public abstract void filterVariants(kotlin.jvm.functions.Function1);
    public abstract java.lang.String getAndroidApplicationId();
    public abstract java.lang.String getAndroidBuildToolsVersion();
    public abstract java.lang.Object getAndroidCompileSdk();
    public abstract java.lang.Object getAndroidMinSdk();
    public abstract java.lang.String getAndroidNamespace();
    public abstract java.lang.String getAndroidNamespacePrefix();
    public abstract java.util.Set getAndroidResourceConfigurations();
    public abstract java.lang.Object getAndroidTargetSdk();
    public abstract int getAndroidVersionCode();
    public abstract java.util.List getNoVerificationBuildTypes();
    public abstract java.util.List getNoVerificationFlavors();
    public abstract boolean getRemoveKotlinMetadata();
    public abstract java.lang.Boolean getSetupRoom();
    public abstract void setAndroidApplicationId(java.lang.String);
    public abstract void setAndroidBuildToolsVersion(java.lang.String);
    public abstract void setAndroidCompileSdk(java.lang.Object);
    public abstract void setAndroidMinSdk(java.lang.Object);
    public abstract void setAndroidNamespace(java.lang.String);
    public abstract void setAndroidNamespacePrefix(java.lang.String);
    public abstract void setAndroidResourceConfigurations(java.util.Set);
    public abstract void setAndroidTargetSdk(java.lang.Object);
    public abstract void setAndroidVersionCode(int);
    public abstract void setNoVerificationBuildTypes(java.util.List);
    public abstract void setNoVerificationFlavors(java.util.List);
    public abstract void setRemoveKotlinMetadata(boolean);
    public abstract void setSetupRoom(java.lang.Boolean);
}

-keep,allowoptimization public interface fluxo.conf.dsl.FluxoConfigurationExtensionCommon {
    public abstract boolean getEnableBuildConfig();
    public abstract java.lang.Boolean getEnableDetektAutoCorrect();
    public abstract java.lang.Boolean getEnableDetektCompilerPlugin();
    public abstract java.lang.Boolean getEnableSpotless();
    public java.lang.Boolean getEnableVerification();
    public abstract boolean getSetupDependencies();
    public abstract boolean getSetupKnownBoms();
    public abstract java.lang.Boolean getSetupVerification();
    public abstract void setEnableBuildConfig(boolean);
    public abstract void setEnableDetektAutoCorrect(java.lang.Boolean);
    public abstract void setEnableDetektCompilerPlugin(java.lang.Boolean);
    public abstract void setEnableSpotless(java.lang.Boolean);
    public void setEnableVerification(java.lang.Boolean);
    public abstract void setSetupDependencies(boolean);
    public abstract void setSetupKnownBoms(boolean);
    public abstract void setSetupVerification(java.lang.Boolean);
}

-keep,allowoptimization public interface fluxo.conf.dsl.FluxoConfigurationExtensionKotlin {
    public void apiValidation(kotlin.jvm.functions.Function1);
    public static synthetic void apiValidation$default(fluxo.conf.dsl.FluxoConfigurationExtensionKotlin, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract boolean getAddStdlibDependency();
    public abstract fluxo.conf.dsl.BinaryCompatibilityValidatorConfig getApiValidation();
    public abstract boolean getEnableApiValidation();
    public abstract java.lang.Boolean getEnableCompose();
    public abstract kotlin.jvm.functions.Function1 getOnConfiguration();
    public abstract java.lang.Boolean getSetupCoroutines();
    public abstract java.lang.Boolean getSetupKapt();
    public abstract boolean getSetupKotlinXSerialization();
    public abstract java.lang.Boolean getSetupKsp();
    public abstract java.lang.Boolean getSuppressKotlinComposeCompatibilityCheck();
    public abstract java.lang.Boolean getUseDokka();
    public void onConfiguration(kotlin.jvm.functions.Function1);
    public abstract void setAddStdlibDependency(boolean);
    public abstract void setApiValidation(fluxo.conf.dsl.BinaryCompatibilityValidatorConfig);
    public abstract void setEnableApiValidation(boolean);
    public abstract void setEnableCompose(java.lang.Boolean);
    public abstract void setOnConfiguration(kotlin.jvm.functions.Function1);
    public abstract void setSetupCoroutines(java.lang.Boolean);
    public abstract void setSetupKapt(java.lang.Boolean);
    public abstract void setSetupKotlinXSerialization(boolean);
    public abstract void setSetupKsp(java.lang.Boolean);
    public abstract void setSuppressKotlinComposeCompatibilityCheck(java.lang.Boolean);
    public abstract void setUseDokka(java.lang.Boolean);
}

-keep,allowoptimization public interface fluxo.conf.dsl.FluxoConfigurationExtensionKotlinOptions {
    public void explicitApi();
    public void explicitApiWarning();
    public abstract java.lang.Boolean getAllWarningsAsErrors();
    public abstract java.lang.Boolean getExperimentalLatestCompilation();
    public abstract org.jetbrains.kotlin.gradle.dsl.ExplicitApiMode getExplicitApi();
    public abstract java.lang.String getJavaLangTarget();
    public abstract java.lang.Boolean getJavaParameters();
    public abstract java.lang.String getJavaTestsLangTarget();
    public java.lang.String getJvmTarget();
    public abstract java.lang.String getKotlinApiVersion();
    public abstract java.lang.String getKotlinCoreLibraries();
    public abstract java.lang.String getKotlinLangVersion();
    public abstract java.lang.String getKotlinTestsLangVersion();
    public abstract java.lang.Boolean getLatestSettingsForTests();
    public abstract java.lang.Boolean getOptInInternal();
    public abstract java.util.List getOptIns();
    public abstract java.lang.Boolean getProgressiveMode();
    public abstract java.lang.Boolean getRemoveAssertionsInRelease();
    public abstract java.lang.Boolean getSetupJvmToolchain();
    public abstract boolean getSetupKotlin();
    public abstract java.lang.Boolean getUseExperimentalFastJarFs();
    public abstract java.lang.Boolean getUseIndyLambdas();
    public abstract void setAllWarningsAsErrors(java.lang.Boolean);
    public abstract void setExperimentalLatestCompilation(java.lang.Boolean);
    public abstract void setExplicitApi(org.jetbrains.kotlin.gradle.dsl.ExplicitApiMode);
    public abstract void setJavaLangTarget(java.lang.String);
    public abstract void setJavaParameters(java.lang.Boolean);
    public abstract void setJavaTestsLangTarget(java.lang.String);
    public void setJvmTarget(java.lang.String);
    public abstract void setKotlinApiVersion(java.lang.String);
    public abstract void setKotlinCoreLibraries(java.lang.String);
    public abstract void setKotlinLangVersion(java.lang.String);
    public abstract void setKotlinTestsLangVersion(java.lang.String);
    public abstract void setLatestSettingsForTests(java.lang.Boolean);
    public abstract void setOptInInternal(java.lang.Boolean);
    public abstract void setOptIns(java.util.List);
    public abstract void setProgressiveMode(java.lang.Boolean);
    public abstract void setRemoveAssertionsInRelease(java.lang.Boolean);
    public abstract void setSetupJvmToolchain(java.lang.Boolean);
    public abstract void setSetupKotlin(boolean);
    public abstract void setUseExperimentalFastJarFs(java.lang.Boolean);
    public abstract void setUseIndyLambdas(java.lang.Boolean);
}

-keep,allowoptimization public interface fluxo.conf.dsl.FluxoConfigurationExtensionPublication {
    public static final fluxo.conf.dsl.FluxoConfigurationExtensionPublication$Companion Companion;
    public static final java.lang.String DEFAULT_BRANCH_NAME;
    public abstract java.lang.String getDefaultGitBranchName();
    public abstract java.lang.String getDescription();
    public abstract java.lang.Boolean getEnablePublication();
    public abstract java.lang.String getGithubProject();
    public abstract java.lang.String getGroup();
    public fluxo.shrink.FluxoShrinkerConfig getMinificationConfig();
    public boolean getMinifyArtifacts();
    public abstract java.lang.String getProjectName();
    public abstract fluxo.conf.dsl.FluxoPublicationConfig getPublicationConfig();
    public abstract java.lang.Boolean getReproducibleArtifacts();
    public abstract boolean getShrinkArtifacts();
    public abstract fluxo.shrink.FluxoShrinkerConfig getShrinkingConfig();
    public abstract java.lang.String getVersion();
    public void minificationConfig(kotlin.jvm.functions.Function1);
    public abstract void publicationConfig(kotlin.jvm.functions.Function1);
    public static synthetic void publicationConfig$default(fluxo.conf.dsl.FluxoConfigurationExtensionPublication, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void setDefaultGitBranchName(java.lang.String);
    public abstract void setDescription(java.lang.String);
    public abstract void setEnablePublication(java.lang.Boolean);
    public abstract void setGithubProject(java.lang.String);
    public abstract void setGroup(java.lang.String);
    public void setMinifyArtifacts(boolean);
    public abstract void setProjectName(java.lang.String);
    public abstract void setPublicationConfig(fluxo.conf.dsl.FluxoPublicationConfig);
    public abstract void setReproducibleArtifacts(java.lang.Boolean);
    public abstract void setShrinkArtifacts(boolean);
    public abstract void setVersion(java.lang.String);
    public abstract void shrinkingConfig(kotlin.jvm.functions.Function1);
}

-keep,allowoptimization public final class fluxo.conf.dsl.FluxoConfigurationExtensionPublication$Companion {
    public static final java.lang.String DEFAULT_BRANCH_NAME;
}

-keep,allowoptimization public final class fluxo.conf.dsl.FluxoPublicationConfig {
    public <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    public synthetic <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker);
    public final java.lang.String component1();
    public final java.lang.String component10();
    public final java.lang.String component11();
    public final java.lang.String component12();
    public final java.lang.String component13();
    public final java.lang.String component14();
    public final boolean component15();
    public final java.lang.String component16();
    public final java.lang.String component17();
    public final java.lang.String component18();
    public final java.lang.String component19();
    public final java.lang.String component2();
    public final java.lang.String component3();
    public final java.lang.String component4();
    public final java.lang.String component5();
    public final java.lang.String component6();
    public final java.lang.String component7();
    public final java.lang.String component8();
    public final java.lang.String component9();
    public final fluxo.conf.dsl.FluxoPublicationConfig copy(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
    public static synthetic fluxo.conf.dsl.FluxoPublicationConfig copy$default(fluxo.conf.dsl.FluxoPublicationConfig, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.Object);
    public boolean equals(java.lang.Object);
    public final java.lang.String getDeveloperEmail();
    public final java.lang.String getDeveloperId();
    public final java.lang.String getDeveloperName();
    public final java.lang.String getGroup();
    public final java.lang.String getLicenseName();
    public final java.lang.String getLicenseUrl();
    public final java.lang.String getProjectDescription();
    public final java.lang.String getProjectName();
    public final java.lang.String getProjectUrl();
    public final java.lang.String getPublicationUrl();
    public final java.lang.String getRepositoryPassword();
    public final java.lang.String getRepositoryUrl();
    public final java.lang.String getRepositoryUserName();
    public final java.lang.String getScmTag();
    public final java.lang.String getScmUrl();
    public final java.lang.String getSigningKey();
    public final java.lang.String getSigningPassword();
    public final java.lang.String getVersion();
    public int hashCode();
    public final boolean isSigningEnabled();
    public final boolean isSnapshot();
    public final void setDeveloperEmail(java.lang.String);
    public final void setDeveloperId(java.lang.String);
    public final void setDeveloperName(java.lang.String);
    public final void setGroup(java.lang.String);
    public final void setLicenseName(java.lang.String);
    public final void setLicenseUrl(java.lang.String);
    public final void setProjectDescription(java.lang.String);
    public final void setProjectName(java.lang.String);
    public final void setProjectUrl(java.lang.String);
    public final void setPublicationUrl(java.lang.String);
    public final void setRepositoryPassword(java.lang.String);
    public final void setRepositoryUrl(java.lang.String);
    public final void setRepositoryUserName(java.lang.String);
    public final void setScmTag(java.lang.String);
    public final void setScmUrl(java.lang.String);
    public final void setSigningKey(java.lang.String);
    public final void setSigningPassword(java.lang.String);
    public final void setSnapshot(boolean);
    public final void setVersion(java.lang.String);
    public java.lang.String toString();
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.Container {
    public abstract void applyPlugins(java.lang.String[]);
    public abstract void applyPlugins(org.gradle.api.provider.Provider[]);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.KmpConfigurationContainerDsl {
    public abstract void allDefaultTargets();
    public abstract void kotlinMultiplatform(kotlin.jvm.functions.Function1);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.KotlinConfigurationContainerDsl {
    public abstract void common(kotlin.jvm.functions.Function1);
    public abstract void kotlin(kotlin.jvm.functions.Function1);
    public void onAndroidTarget(org.gradle.api.Action);
    public abstract void onTarget(java.lang.Class, org.gradle.api.Action);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.KotlinTargetContainer {
    public abstract void target(kotlin.jvm.functions.Function1);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AndroidNativeTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AndroidNativeTarget$Configure {
    public void androidNative(kotlin.jvm.functions.Function1);
    public static synthetic void androidNative$default(fluxo.conf.dsl.container.target.AndroidNativeTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public void androidNative64(kotlin.jvm.functions.Function1);
    public static synthetic void androidNative64$default(fluxo.conf.dsl.container.target.AndroidNativeTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void androidNativeArm32(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void androidNativeArm32$default(fluxo.conf.dsl.container.target.AndroidNativeTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void androidNativeArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void androidNativeArm64$default(fluxo.conf.dsl.container.target.AndroidNativeTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void androidNativeX64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void androidNativeX64$default(fluxo.conf.dsl.container.target.AndroidNativeTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void androidNativeX86(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void androidNativeX86$default(fluxo.conf.dsl.container.target.AndroidNativeTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AndroidTarget {
    public void android(kotlin.jvm.functions.Function1);
    public abstract void onAndroidExtension(kotlin.jvm.functions.Function1);
    public abstract void sourceSetTestInstrumented(kotlin.jvm.functions.Function1);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AndroidTarget$Configure {
    public void android(kotlin.jvm.functions.Function1);
    public abstract void androidApp(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void androidApp$default(fluxo.conf.dsl.container.target.AndroidTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void androidLibrary(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void androidLibrary$default(fluxo.conf.dsl.container.target.AndroidTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AppleIosTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AppleIosTarget$Configure {
    public void ios(kotlin.jvm.functions.Function1);
    public static synthetic void ios$default(fluxo.conf.dsl.container.target.AppleIosTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void iosArm32(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void iosArm32$default(fluxo.conf.dsl.container.target.AppleIosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void iosArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void iosArm64$default(fluxo.conf.dsl.container.target.AppleIosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void iosSimulatorArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void iosSimulatorArm64$default(fluxo.conf.dsl.container.target.AppleIosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void iosX64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void iosX64$default(fluxo.conf.dsl.container.target.AppleIosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AppleMacosTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AppleMacosTarget$Configure {
    public void macos(kotlin.jvm.functions.Function1);
    public static synthetic void macos$default(fluxo.conf.dsl.container.target.AppleMacosTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void macosArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void macosArm64$default(fluxo.conf.dsl.container.target.AppleMacosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void macosX64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void macosX64$default(fluxo.conf.dsl.container.target.AppleMacosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AppleTvosTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AppleTvosTarget$Configure {
    public void tvos(kotlin.jvm.functions.Function1);
    public static synthetic void tvos$default(fluxo.conf.dsl.container.target.AppleTvosTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void tvosArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void tvosArm64$default(fluxo.conf.dsl.container.target.AppleTvosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void tvosSimulatorArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void tvosSimulatorArm64$default(fluxo.conf.dsl.container.target.AppleTvosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void tvosX64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void tvosX64$default(fluxo.conf.dsl.container.target.AppleTvosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AppleWatchosTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.AppleWatchosTarget$Configure {
    public abstract void watchos(kotlin.jvm.functions.Function1);
    public static synthetic void watchos$default(fluxo.conf.dsl.container.target.AppleWatchosTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void watchosArm32(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void watchosArm32$default(fluxo.conf.dsl.container.target.AppleWatchosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void watchosArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void watchosArm64$default(fluxo.conf.dsl.container.target.AppleWatchosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void watchosDeviceArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void watchosDeviceArm64$default(fluxo.conf.dsl.container.target.AppleWatchosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void watchosSimulatorArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void watchosSimulatorArm64$default(fluxo.conf.dsl.container.target.AppleWatchosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void watchosX64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void watchosX64$default(fluxo.conf.dsl.container.target.AppleWatchosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void watchosX86(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void watchosX86$default(fluxo.conf.dsl.container.target.AppleWatchosTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.JsTarget {
    public abstract org.jetbrains.kotlin.gradle.plugin.KotlinJsCompilerType getCompilerType();
    public abstract void setCompilerType(org.jetbrains.kotlin.gradle.plugin.KotlinJsCompilerType);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.JsTarget$Configure {
    public abstract void js(org.jetbrains.kotlin.gradle.plugin.KotlinJsCompilerType, java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void js$default(fluxo.conf.dsl.container.target.JsTarget$Configure, org.jetbrains.kotlin.gradle.plugin.KotlinJsCompilerType, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.JvmTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.JvmTarget$Configure {
    public abstract void jvm(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void jvm$default(fluxo.conf.dsl.container.target.JvmTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.LinuxTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.LinuxTarget$Configure {
    public void linux(kotlin.jvm.functions.Function1);
    public static synthetic void linux$default(fluxo.conf.dsl.container.target.LinuxTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void linuxArm32Hfp(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void linuxArm32Hfp$default(fluxo.conf.dsl.container.target.LinuxTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void linuxArm64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void linuxArm64$default(fluxo.conf.dsl.container.target.LinuxTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void linuxMips32(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void linuxMips32$default(fluxo.conf.dsl.container.target.LinuxTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void linuxMipsel32(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void linuxMipsel32$default(fluxo.conf.dsl.container.target.LinuxTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void linuxX64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void linuxX64$default(fluxo.conf.dsl.container.target.LinuxTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.MingwTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.MingwTarget$Configure {
    public void mingw(kotlin.jvm.functions.Function1);
    public static synthetic void mingw$default(fluxo.conf.dsl.container.target.MingwTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void mingwX64(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void mingwX64$default(fluxo.conf.dsl.container.target.MingwTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void mingwX86(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void mingwX86$default(fluxo.conf.dsl.container.target.MingwTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.WasmNativeTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.WasmNativeTarget$Configure {
    public abstract void wasm32(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void wasm32$default(fluxo.conf.dsl.container.target.WasmNativeTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public void wasmNative(kotlin.jvm.functions.Function1);
    public static synthetic void wasmNative$default(fluxo.conf.dsl.container.target.WasmNativeTarget$Configure, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.WasmTarget

-keep,allowoptimization public interface fluxo.conf.dsl.container.target.WasmTarget$Configure {
    public abstract void wasmJs(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void wasmJs$default(fluxo.conf.dsl.container.target.WasmTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
    public abstract void wasmWasi(java.lang.String, kotlin.jvm.functions.Function1);
    public static synthetic void wasmWasi$default(fluxo.conf.dsl.container.target.WasmTarget$Configure, java.lang.String, kotlin.jvm.functions.Function1, int, java.lang.Object);
}

-keep,allowoptimization public interface fluxo.conf.kmp.SourceSetBundle {
    public synthetic boolean contains(org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet);
    public abstract org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet getMain();
    public org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet[] getMoreTests();
    public abstract org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet getTest();
}

-keep,allowoptimization public interface fluxo.shrink.FluxoShrinkerConfig {
    public abstract org.gradle.api.provider.Property getAutoGenerateKeepModifiers();
    public abstract org.gradle.api.provider.Property getAutoGenerateKeepRulesFromApis();
    public abstract org.gradle.api.file.ConfigurableFileCollection getConfigurationFiles();
    public abstract org.gradle.api.provider.Property getForceExternalShrinkerRun();
    public abstract org.gradle.api.provider.Property getForceUnbundledShrinker();
    public abstract org.gradle.api.provider.Property getMaxHeapSize();
    public abstract org.gradle.api.provider.Property getObfuscate();
    public abstract org.gradle.api.provider.Property getOptimize();
    public abstract org.gradle.api.provider.Property getR8FullMode();
    public abstract org.gradle.api.provider.Property getReplaceOutgoingJar();
    public abstract org.gradle.api.provider.Property getUseBothShrinkers();
    public abstract org.gradle.api.provider.Property getUseR8();
}

