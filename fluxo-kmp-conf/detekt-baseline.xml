<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>AnnotationOnSeparateLine:KotlinConfig.kt$@Suppress("DEPRECATION") KotlinLangVersion.KOTLIN_1_4</ID>
    <ID>AnnotationOnSeparateLine:SetupKotlin.kt$@Suppress("InstanceOfCheckForException") e</ID>
    <ID>ArgumentListWrapping:SetupJvmCompatibility.kt$("kotlinOptions")</ID>
    <ID>ArgumentListWrapping:SetupKotlinDependencies.kt$(if (isApplication) dh.enforcedPlatform(it) else dh.platform(it))</ID>
    <ID>ArgumentListWrapping:SetupKotlinDependencies.kt$(it)</ID>
    <ID>ComplexCondition:SetupTestsReport.kt$!enabled || mergedReportTask == null || mergedReportService == null || !isTestTaskAllowed()</ID>
    <ID>CyclomaticComplexMethod:DependencyPinningBundle.kt$internal fun FluxoKmpConfContext.prepareDependencyPinningBundle()</ID>
    <ID>CyclomaticComplexMethod:LoadAndApplyPluginIfNotApplied.kt$private fun FluxoKmpConfContext.loadPluginArtifactAndGetClass( pluginId: String, pluginVersion: String?, className: String?, catalogPluginAlias: String?, lookupClassName: Boolean, canLoadDynamically: Boolean, ): Class&lt;*&gt;?</ID>
    <ID>CyclomaticComplexMethod:SetupAndroidLint.kt$internal fun Project.setupAndroidLint( conf: FluxoConfigurationExtensionImpl, ignoredBuildTypes: List&lt;String&gt;, ignoredFlavors: List&lt;String&gt;, )</ID>
    <ID>CyclomaticComplexMethod:SetupKotlin.kt$internal fun configureKotlinJvm( type: ConfigurationType, configuration: FluxoConfigurationExtensionImpl, containers: Array&lt;Container&gt;, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:SetupKotlin.kt$internal fun configureKotlinMultiplatform( configuration: FluxoConfigurationExtensionImpl, containers: Array&lt;Container&gt;, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:SetupKotlin.kt$private fun KotlinProjectExtension.setupTargets( conf: FluxoConfigurationExtensionImpl, isMultiplatform: Boolean = this is KotlinMultiplatformExtension, )</ID>
    <ID>CyclomaticComplexMethod:SetupPublication.kt$internal fun MavenPublication.setupPublicationPom( project: Project, context: FluxoKmpConfContext, config: FluxoPublicationConfig, useDokka: Boolean, )</ID>
    <ID>ForbiddenComment:AndroidTarget.kt$AndroidTarget$// FIXME: Implement API for source sets.</ID>
    <ID>ForbiddenComment:AndroidTarget.kt$AndroidTarget.Configure$// TODO: Detect applied plugin (lib/app) and use appropriate container?</ID>
    <ID>ForbiddenComment:AppleIosTarget.kt$// FIXME: Public hierarchy of targets for easier configuration</ID>
    <ID>ForbiddenComment:ContainerImpl.kt$ContainerImpl$// TODO: Utilize version available from PluginDependency</ID>
    <ID>ForbiddenComment:DependencyAnalysisPlugin.kt$// TODO: no need to declare transitive dependencies for the final app module</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Allow to customize configurations auto-filtration</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Allow to customize projects auto-filtration</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Opt-out configurable switch via `fluxoKmpConf { depsGuard = false }`</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Update when resolved (https://github.com/dropbox/dependency-guard/issues/3)</ID>
    <ID>ForbiddenComment:DependencyUtils.kt$// TODO: Support rich VersionConstraint</ID>
    <ID>ForbiddenComment:DisableUnreachableTasks.kt$// FIXME: Check if this is actually useful</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtension.kt$FluxoConfigurationExtension$/* // TODO: Add remaining functionality from the old DSL setupBinaryCompatibilityValidator setupPublication */</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionAndroidImpl.kt$FluxoConfigurationExtensionAndroidImpl$// TODO: Avoid casting</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionKotlin.kt$FluxoConfigurationExtensionKotlin$// FIXME: koverReport settings</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionPublicationImpl.kt$FluxoConfigurationExtensionPublicationImpl$// TODO: Add validation for value. Shouldn't be url, but `namespace/name`</ID>
    <ID>ForbiddenComment:FluxoKmpConfContext.kt$FluxoKmpConfContext$// TODO: Better integration with `gradle-idea-ext-plugin` or `idea` plugins.</ID>
    <ID>ForbiddenComment:GetSetOfRequestedKmpTargets.kt$// TODO: Support "metadata_only"/metadataOnly mode (see arkivanov/gradle-setup-plugin)</ID>
    <ID>ForbiddenComment:KmpHierarchyTemplate.kt$// TODO: commonWasm group for wasmWasi and wasmJs</ID>
    <ID>ForbiddenComment:KmpTargetContainer.kt$KmpTargetContainer$// TODO: Create common bundle once and reuse?</ID>
    <ID>ForbiddenComment:KotlinConfig.kt$// FIXME: Add env flag for dynamic switch-on when needed (and enable by a task name if called directly)</ID>
    <ID>ForbiddenComment:KotlinSetupDiagnosticTasks.kt$// TODO: @DisableCachingByDefault(because = "Not worth caching")</ID>
    <ID>ForbiddenComment:KotlinSourceSetsReportTask.kt$// TODO: Mark source sets with deprectaed or 3rd tier targets</ID>
    <ID>ForbiddenComment:LoadAndApplyPluginIfNotApplied.kt$// TODO: Check version for correctness</ID>
    <ID>ForbiddenComment:MultiplatformSourceSetUtils.kt$// TODO: Create bundles once and reuse or at least make them lazy evaluatable.</ID>
    <ID>ForbiddenComment:NodeGraphsRenderer.kt$NodeGraphsRenderer.LegendRenderer$// FIXME: This is not implemented yet.</ID>
    <ID>ForbiddenComment:PropsAndEnv.kt$// TODO: Optimize, make lazy accessible via root project</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// FIXME: Implement cleaner 2-levels lazy API: asAndroidApp { android { ... } }</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// FIXME: Implement cleaner 2-levels lazy API: asAndroidLib { android { ... } }</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// TODO: Test for libraries bytecode.</ID>
    <ID>ForbiddenComment:SetupAndroidLint.kt$// TODO: Setup Lint for NonAndroid projects</ID>
    <ID>ForbiddenComment:SetupAndroidSigning.kt$// TODO: Support for ENV variables instead of file for more straightforward CI/CD</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Disable non-resolving tasks if resolving version is available.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Use kotlin settings directly from the linked kotlin compilation task?</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// TODO: Add option to ignore baselines completely and fail on anything,</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// TODO: Improve detekt task platform detection.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$DetectedTaskPlatform$// TODO: Detect common/metadata tasks?</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: Spotless stup</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: apiDump/apiCheck</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: check all features</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: detekt plugins https://detekt.dev/marketplace/</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: git hooks</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// TODO: Retry create pluginId from configuration if null?</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// TODO: Try avoid this cast?</ID>
    <ID>ForbiddenComment:SetupKotlin.kt$// TODO: Check KSP setup for KMP modules</ID>
    <ID>ForbiddenComment:SetupKotlin.kt$// TODO: Detect if KMP is already applied and what targets are already configured.</ID>
    <ID>ForbiddenComment:SetupKotlinCompatibility.kt$// TODO: Detekt doesn't support 21 yet, enable when it does</ID>
    <ID>ForbiddenComment:SetupKotlinDependencies.kt$// TODO: Use `compileOnlyApi` for transitively included compile-only dependencies.</ID>
    <ID>ForbiddenComment:SetupKotlinDependencies.kt$// TODO: With coil-bom:2.2.2 doesn't work as enforcedPlatform for Android and/or KMP</ID>
    <ID>ForbiddenComment:SetupKotlinExperimentalTestCompilation.kt$// TODO: Find a solution for KMP 2.0</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// FIXME: Move to JvmCompatibility?</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// FIXME: Move to KotlinConfig and configure in the context</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: &amp;&amp; kotlinLang &gt;= KotlinLangVersion.KOTLIN_1_7</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: Allow -Xjdk-release=1.6 with -jvm-target 1.8 once it is supported</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: Make conversion of Compose Compiler metrics to HTML automatically with Gradle.</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Add support for multiple developers</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Add support for multiple licenses</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Decorate the build logs with maven coordinates of published artifacts</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Make configurable</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Protect publication tasks from invalid GIT state (dirty, untracked files, etc.)</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Replace Gradle Plugin publishing with something less broken (official is just a mess)?</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Set RC/alpha/beta releases status to Ivy's: milestone/integration when it will be possible</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Warn only when assemble and/or publishing really called.</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Freshmark</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Git pre-commit hook</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Licenses</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Only if java plugin is enabled?</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Use ktlint directly?</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: read base settings from .editorconfig ?</ID>
    <ID>ForbiddenComment:SetupTestsReport.kt$// TODO: Support Gradle before 8.0 (set service parameter and usesService) ?</ID>
    <ID>ForbiddenComment:SetupVerification.kt$// TODO: Test separate ktlint setup with gradle plugin</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// FIXME: Implement API for source sets.</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// TODO: provide a `setupParentSourceSet` with a single SourceSet arg</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// TODO: should androidUnitTestDebug depend on androidUnitTest?</ID>
    <ID>ImportOrdering:AppleWatchosTarget.kt$import fluxo.conf.dsl.container.KotlinTargetContainer import fluxo.conf.dsl.container.impl.KmpTargetCode.Companion.DEPRECATED_TARGET_MSG import fluxo.conf.impl.EMPTY_FUN import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithSimulatorTests as KNTST import watchosCompat</ID>
    <ID>ImportOrdering:DependencyGuardPlugin.kt$import com.dropbox.gradle.plugins.dependencyguard.DependencyGuardConfiguration import com.dropbox.gradle.plugins.dependencyguard.DependencyGuardPlugin import com.dropbox.gradle.plugins.dependencyguard.DependencyGuardPluginExtension import fluxo.conf.FluxoKmpConfContext import fluxo.conf.data.BuildConstants.DEPS_GUARD_PLUGIN_ALIAS import fluxo.conf.data.BuildConstants.DEPS_GUARD_PLUGIN_ID import fluxo.conf.data.BuildConstants.DEPS_GUARD_PLUGIN_VERSION import fluxo.conf.deps.loadAndApplyPluginIfNotApplied import fluxo.conf.impl.d import java.util.Locale import org.gradle.api.Action import org.gradle.api.Project import org.gradle.api.artifacts.Configuration import org.gradle.language.base.plugins.LifecycleBasePlugin.CHECK_TASK_NAME</ID>
    <ID>ImportOrdering:DisableUnreachableTasks.kt$import fluxo.conf.FluxoKmpConfContext import fluxo.conf.impl.SHOW_DEBUG_LOGS import fluxo.conf.impl.d import fluxo.conf.impl.l import fluxo.conf.impl.v import java.util.concurrent.atomic.AtomicBoolean import org.gradle.api.Task import org.gradle.api.execution.TaskExecutionGraph import org.gradle.api.logging.Logger</ID>
    <ID>ImportOrdering:ExtensionUtils.kt$import kotlin.reflect.KClass import org.gradle.api.Action import org.gradle.api.UnknownDomainObjectException import org.gradle.api.plugins.ExtensionAware import org.gradle.api.plugins.ExtensionContainer import org.gradle.api.plugins.ExtraPropertiesExtension import org.gradle.api.reflect.TypeOf</ID>
    <ID>ImportOrdering:FluxoCache.kt$import fluxo.conf.impl.checkIsRootProject import fluxo.conf.impl.d import fluxo.conf.impl.l import fluxo.conf.impl.withType import java.io.Serializable import java.net.URLClassLoader import org.gradle.api.Action import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.logging.Logger import org.gradle.language.base.plugins.LifecycleBasePlugin import org.gradle.language.base.plugins.LifecycleBasePlugin.CLEAN_TASK_NAME</ID>
    <ID>ImportOrdering:FluxoConfigurationExtension.kt$import fluxo.conf.dsl.container.KmpConfigurationContainerDsl as KmpDsl import fluxo.conf.dsl.container.KotlinConfigurationContainerDsl as KstDsl import fluxo.conf.dsl.impl.FluxoConfigurationExtensionImpl import fluxo.conf.impl.EMPTY_FUN import fluxo.conf.impl.find import org.gradle.api.Action import org.gradle.api.Project import org.jetbrains.kotlin.gradle.dsl.KotlinAndroidProjectExtension import org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension</ID>
    <ID>ImportOrdering:FluxoConfigurationExtensionAndroidImpl.kt$import com.android.build.api.variant.VariantBuilder import fluxo.conf.FluxoKmpConfContext import fluxo.conf.data.BuildConstants.DEFAULT_ANDROID_COMPILE_SDK import fluxo.conf.data.BuildConstants.DEFAULT_ANDROID_MIN_SDK import fluxo.conf.data.BuildConstants.DEFAULT_ANDROID_TARGET_SDK import fluxo.conf.dsl.FluxoConfigurationExtension import fluxo.conf.dsl.FluxoConfigurationExtensionAndroid import fluxo.conf.dsl.FluxoConfigurationExtensionPublication import fluxo.conf.impl.uncheckedCast import fluxo.conf.impl.v import fluxo.conf.impl.vInt import java.util.Locale import org.gradle.api.Project import org.gradle.api.provider.ListProperty import org.gradle.api.provider.Property import org.gradle.api.provider.SetProperty import org.gradle.api.tasks.Input</ID>
    <ID>ImportOrdering:FluxoConfigurationExtensionImpl.kt$import fluxo.conf.FluxoKmpConfContext import fluxo.conf.dsl.FluxoConfigurationExtension import fluxo.conf.dsl.FluxoKmpConfDsl import fluxo.conf.dsl.container.Container import fluxo.conf.dsl.container.KmpConfigurationContainerDsl as KmpDsl import fluxo.conf.dsl.container.KotlinConfigurationContainerDsl as KstDsl import fluxo.conf.dsl.container.impl.ContainerHolder import fluxo.conf.dsl.container.impl.KmpConfigurationContainerDslImpl import fluxo.conf.dsl.container.impl.KmpTargetCode import fluxo.conf.dsl.fluxoConfiguration import fluxo.conf.dsl.impl.ConfigurationType.ANDROID_APP import fluxo.conf.dsl.impl.ConfigurationType.ANDROID_LIB import fluxo.conf.dsl.impl.ConfigurationType.GRADLE_PLUGIN import fluxo.conf.dsl.impl.ConfigurationType.IDEA_PLUGIN import fluxo.conf.dsl.impl.ConfigurationType.KOTLIN_JVM import fluxo.conf.dsl.impl.ConfigurationType.KOTLIN_MULTIPLATFORM import fluxo.conf.impl.uncheckedCast import javax.inject.Inject import org.gradle.api.GradleException import org.gradle.api.Project import org.gradle.api.provider.Property import org.gradle.api.tasks.Input import org.gradle.api.tasks.Internal import org.jetbrains.kotlin.gradle.dsl.KotlinAndroidProjectExtension import org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension</ID>
    <ID>ImportOrdering:FluxoConfigurationExtensionPublicationImpl.kt$import buildNumberSuffix import envOrPropValue import fluxo.conf.FluxoKmpConfContext import fluxo.conf.dsl.FluxoConfigurationExtension import fluxo.conf.dsl.FluxoConfigurationExtensionPublication import fluxo.conf.dsl.FluxoConfigurationExtensionPublication.Companion.DEFAULT_BRANCH_NAME import fluxo.conf.dsl.FluxoPublicationConfig import fluxo.conf.impl.v import java.text.SimpleDateFormat import java.util.Date import org.gradle.api.Project import org.gradle.api.provider.Property import org.gradle.api.tasks.Input import scmTag import signingKey</ID>
    <ID>ImportOrdering:FluxoKmpConfContext.kt$import allKmpTargetsEnabled import areComposeMetricsEnabled import disableTests import fluxo.conf.deps.GradleProvisioner import fluxo.conf.deps.Provisioner import fluxo.conf.dsl.container.impl.KmpTargetCode import fluxo.conf.dsl.container.impl.getSetOfRequestedKmpTargets import fluxo.conf.feat.registerDetektMergeRootTask import fluxo.conf.feat.registerLintMergeRootTask import fluxo.conf.impl.CPUs import fluxo.conf.impl.SHOW_DEBUG_LOGS import fluxo.conf.impl.d import fluxo.conf.impl.e import fluxo.conf.impl.kotlin.JRE_VERSION_STRING import fluxo.conf.impl.kotlin.KotlinConfig import fluxo.conf.impl.kotlin.kotlinPluginVersion import fluxo.conf.impl.kotlin.mppAndroidSourceSetLayoutVersion import fluxo.conf.impl.l import fluxo.conf.impl.libsCatalogOptional import fluxo.conf.impl.tryAsBoolean import fluxo.conf.impl.v import fluxo.conf.impl.w import getValue import isCI import isDesugaringEnabled import isMaxDebugEnabled import isR8Disabled import isRelease import javax.inject.Inject import org.gradle.api.DomainObjectSet import org.gradle.api.Project import org.gradle.api.artifacts.VersionCatalog import org.gradle.api.internal.tasks.JvmConstants.TEST_TASK_NAME import org.gradle.api.plugins.PluginAware import org.gradle.build.event.BuildEventsListenerRegistry import org.gradle.language.base.plugins.LifecycleBasePlugin.CHECK_TASK_NAME import useKotlinDebug</ID>
    <ID>ImportOrdering:GetSetOfRequestedKmpTargets.kt$import fluxo.conf.FluxoKmpConfContext import fluxo.conf.dsl.container.impl.KmpTargetCode.Companion as Code import isSplitTargetsEnabled import org.gradle.api.GradleException import requestedKmpTargets</ID>
    <ID>ImportOrdering:GradleProvisioner.kt$import fluxo.conf.impl.w import java.io.File import org.gradle.api.GradleException import org.gradle.api.InvalidUserDataException import org.gradle.api.Project import org.gradle.api.artifacts.ConfigurationContainer import org.gradle.api.artifacts.dsl.DependencyHandler import org.gradle.api.attributes.Bundling import org.gradle.internal.component.AbstractVariantSelectionException</ID>
    <ID>ImportOrdering:KotlinConfig.kt$import fluxo.conf.dsl.impl.FluxoConfigurationExtensionImpl import fluxo.conf.impl.android.hasRoomPlugin import fluxo.conf.impl.l import fluxo.conf.impl.w import kotlin.KotlinVersion import noManualHierarchy import org.gradle.api.Project import org.gradle.api.logging.Logger import org.jetbrains.kotlin.gradle.dsl.KotlinProjectExtension import org.jetbrains.kotlin.gradle.dsl.KotlinVersion as KotlinLangVersion</ID>
    <ID>ImportOrdering:KotlinSourceSetsReportTask.kt$import fluxo.conf.graph.AsciiGraphReportRenderer import fluxo.conf.graph.GraphNode import fluxo.conf.graph.RenderableNode import fluxo.conf.graph.SimpleNodeRenderer import fluxo.conf.impl.uncheckedCast import java.io.File import kotlin.reflect.KProperty import org.gradle.api.Project import org.gradle.api.provider.Property import org.gradle.api.tasks.Input import org.gradle.api.tasks.Internal import org.gradle.api.tasks.diagnostics.AbstractProjectBasedReportTask import org.gradle.api.tasks.diagnostics.internal.ProjectDetails import org.gradle.api.tasks.options.Option import org.gradle.internal.logging.text.StyledTextOutput import org.gradle.work.DisableCachingByDefault import org.jetbrains.kotlin.gradle.dsl.kotlinExtension import org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet import org.jetbrains.kotlin.gradle.plugin.KotlinTarget import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget import org.jetbrains.kotlin.gradle.plugin.sources.DefaultKotlinSourceSet import org.jetbrains.kotlin.konan.target.KonanTarget.Companion.deprecatedTargets</ID>
    <ID>ImportOrdering:LoadAndApplyPluginIfNotApplied.kt$import fluxo.conf.FluxoKmpConfContext import fluxo.conf.impl.SHOW_DEBUG_LOGS import fluxo.conf.impl.d import fluxo.conf.impl.e import fluxo.conf.impl.p import fluxo.conf.impl.v import fluxo.conf.impl.w import getGradlePluginMarkerArtifactMavenCoordinates import java.util.regex.Pattern import org.gradle.api.Project import org.gradle.api.logging.Logger import org.gradle.api.plugins.UnknownPluginException</ID>
    <ID>ImportOrdering:MultiplatformSourceSetUtils.kt$import fluxo.conf.dsl.container.impl.KmpTargetCode import fluxo.conf.dsl.container.impl.KmpTargetContainerImpl import fluxo.conf.dsl.container.impl.KmpTargetContainerImpl.CommonJvm.Companion.ANDROID import fluxo.conf.impl.compileOnlyAndLog import fluxo.conf.impl.e import fluxo.conf.impl.implementation import fluxo.conf.impl.implementationAndLog import fluxo.conf.impl.isTestRelated import fluxo.conf.impl.kotlin import fluxo.conf.impl.kotlin.KOTLIN_SOURCE_SETS_DEPENDS_ON_DEPRECATION import fluxo.conf.kmp.SourceSetBundle import kotlin.properties.PropertyDelegateProvider import kotlin.properties.ReadOnlyProperty import org.gradle.api.GradleException import org.gradle.api.NamedDomainObjectCollection import org.gradle.api.NamedDomainObjectContainer import org.gradle.api.Project import org.jetbrains.kotlin.gradle.dsl.KotlinTopLevelExtension import org.jetbrains.kotlin.gradle.plugin.KotlinDependencyHandler import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType import org.jetbrains.kotlin.gradle.plugin.KotlinSourceSet import org.jetbrains.kotlin.gradle.plugin.KotlinSourceSetContainer import org.jetbrains.kotlin.gradle.plugin.KotlinTarget import org.jetbrains.kotlin.gradle.plugin.KotlinTargetsContainer import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget import org.jetbrains.kotlin.konan.target.Family</ID>
    <ID>ImportOrdering:NodeGraphsRenderer.kt$import kotlin.math.min import org.gradle.internal.graph.GraphRenderer import org.gradle.internal.logging.text.StyledTextOutput import org.gradle.internal.logging.text.StyledTextOutput.Style.Info</ID>
    <ID>ImportOrdering:OnBuildFinishedService.kt$import fluxo.conf.impl.uncheckedCast import java.util.concurrent.ConcurrentHashMap import org.gradle.api.provider.Provider import org.gradle.api.services.BuildService import org.gradle.api.services.BuildServiceParameters import org.gradle.tooling.events.FinishEvent import org.gradle.tooling.events.OperationCompletionListener</ID>
    <ID>ImportOrdering:PropsAndEnv.kt$import fluxo.conf.dsl.container.impl.KmpTargetCode.Companion.KMP_TARGETS_ALL_PROP import fluxo.conf.dsl.container.impl.KmpTargetCode.Companion.KMP_TARGETS_PROP import fluxo.conf.dsl.container.impl.KmpTargetCode.Companion.SPLIT_TARGETS_PROP import fluxo.conf.feat.LOAD_KMM_CODE_COMPLETION_FLAG import fluxo.conf.impl.envOrPropFlag import fluxo.conf.impl.envOrPropFlagValue import fluxo.conf.impl.envOrPropValue import fluxo.conf.impl.envOrPropValueLenient import fluxo.conf.impl.memoize import java.util.regex.Pattern import org.gradle.api.Incubating import org.gradle.api.Project import org.gradle.api.provider.Provider</ID>
    <ID>ImportOrdering:SetupAndroidLint.kt$import com.android.build.api.dsl.CommonExtension import com.android.build.gradle.internal.lint.AndroidLintAnalysisTask import com.android.build.gradle.internal.lint.AndroidLintTask import com.android.build.gradle.internal.lint.AndroidLintTextOutputTask import com.android.build.gradle.internal.lint.LintTool import com.android.build.gradle.internal.tasks.AndroidVariantTask import com.android.build.gradle.tasks.ExtractAnnotations import fluxo.conf.FluxoKmpConfContext import fluxo.conf.dsl.container.impl.KmpTargetCode import fluxo.conf.dsl.impl.FluxoConfigurationExtensionImpl import fluxo.conf.impl.SHOW_DEBUG_LOGS import fluxo.conf.impl.android.ANDROID_EXT_NAME import fluxo.conf.impl.configureExtension import fluxo.conf.impl.disableTask import fluxo.conf.impl.ifNotEmpty import fluxo.conf.impl.l import fluxo.conf.impl.v import fluxo.conf.impl.w import fluxo.conf.impl.withType import io.gitlab.arturbosch.detekt.report.ReportMergeTask import java.util.concurrent.atomic.AtomicBoolean import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.provider.Property import org.gradle.api.tasks.TaskProvider import org.gradle.language.base.plugins.LifecycleBasePlugin.CHECK_TASK_NAME</ID>
    <ID>ImportOrdering:SetupAndroidSigning.kt$import com.android.build.api.dsl.ApkSigningConfig import com.android.build.api.dsl.ApplicationExtension import fluxo.conf.impl.get import fluxo.conf.impl.l import java.io.File import java.util.Properties import org.gradle.api.Project</ID>
    <ID>ImportOrdering:SetupJvmCompatibility.kt$import com.android.build.gradle.TestedExtension import fluxo.conf.impl.android.ANDROID_EXT_NAME import fluxo.conf.impl.configureExtensionIfAvailable import fluxo.conf.impl.l import kotlin.math.max import org.gradle.api.JavaVersion import org.gradle.api.Project import org.gradle.api.plugins.ExtensionAware import org.gradle.api.plugins.JavaPluginExtension import org.gradle.api.tasks.TaskProvider import org.gradle.api.tasks.compile.JavaCompile import org.jetbrains.kotlin.gradle.dsl.KotlinJvmOptions import org.jetbrains.kotlin.gradle.dsl.KotlinProjectExtension import org.jetbrains.kotlin.gradle.dsl.KotlinSingleTargetExtension import org.jetbrains.kotlin.gradle.plugin.KotlinCompilation import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinJvmAndroidCompilation import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinJvmCompilation import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinWithJavaCompilation import org.jetbrains.kotlin.gradle.targets.jvm.KotlinJvmTarget</ID>
    <ID>ImportOrdering:SetupKotlinCompatibility.kt$import bundle import fluxo.conf.dsl.impl.FluxoConfigurationExtensionImpl import fluxo.conf.impl.e import fluxo.conf.impl.isTestRelated import kotlin.KotlinVersion import org.gradle.api.Project import org.gradle.api.logging.Logger import org.jetbrains.kotlin.gradle.dsl.KotlinCommonOptions import org.jetbrains.kotlin.gradle.dsl.KotlinProjectExtension import org.jetbrains.kotlin.gradle.dsl.KotlinVersion as KotlinLangVersion import org.jetbrains.kotlin.gradle.plugin.KotlinCompilation import org.jetbrains.kotlin.gradle.plugin.getKotlinPluginVersion import org.jetbrains.kotlin.gradle.plugin.sources.AbstractKotlinSourceSet</ID>
    <ID>ImportOrdering:SetupPublication.kt$import MAIN_SOURCE_SET_NAME import com.android.build.gradle.LibraryExtension import fluxo.conf.FluxoKmpConfContext import fluxo.conf.data.BuildConstants import fluxo.conf.deps.loadAndApplyPluginIfNotApplied import fluxo.conf.dsl.FluxoPublicationConfig import fluxo.conf.dsl.container.impl.KmpTargetCode import fluxo.conf.dsl.impl.ConfigurationType import fluxo.conf.dsl.impl.FluxoConfigurationExtensionImpl import fluxo.conf.impl.SHOW_DEBUG_LOGS import fluxo.conf.impl.android.DEBUG import fluxo.conf.impl.android.RELEASE import fluxo.conf.impl.configureExtension import fluxo.conf.impl.create import fluxo.conf.impl.e import fluxo.conf.impl.get import fluxo.conf.impl.getByName import fluxo.conf.impl.hasExtension import fluxo.conf.impl.kotlin.KOTLIN_EXT import fluxo.conf.impl.kotlin.multiplatformExtension import fluxo.conf.impl.l import fluxo.conf.impl.named import fluxo.conf.impl.the import fluxo.conf.impl.w import fluxo.conf.impl.withType import java.util.concurrent.atomic.AtomicBoolean import org.gradle.api.Project import org.gradle.api.Task import org.gradle.api.plugins.JavaPluginExtension import org.gradle.api.publish.PublicationContainer import org.gradle.api.publish.PublishingExtension import org.gradle.api.publish.maven.MavenPublication import org.gradle.api.tasks.bundling.AbstractArchiveTask import org.gradle.jvm.tasks.Jar import org.gradle.language.base.plugins.LifecycleBasePlugin import org.gradle.plugin.devel.GradlePluginDevelopmentExtension import org.gradle.plugins.signing.SigningExtension import org.jetbrains.dokka.gradle.DokkaTask import org.jetbrains.kotlin.gradle.dsl.KotlinJvmProjectExtension import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType</ID>
    <ID>ImportOrdering:TargetAppleWatchosContainer.kt$import fluxo.conf.dsl.container.impl.ContainerContext import fluxo.conf.dsl.container.impl.ContainerHolderAware import fluxo.conf.dsl.container.impl.KmpTargetCode import fluxo.conf.dsl.container.impl.KmpTargetCode.Companion.DEPRECATED_TARGET_MSG import fluxo.conf.dsl.container.impl.KmpTargetCode.WATCHOS_SIMULATOR_ARM64 import fluxo.conf.dsl.container.impl.KmpTargetContainerImpl import fluxo.conf.dsl.container.target.AppleWatchosTarget import fluxo.conf.impl.kotlin.KOTLIN_1_8 import org.gradle.api.GradleException import org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget as KNT import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithSimulatorTests as KNTS import watchosCompat</ID>
    <ID>ImportOrdering:TestReportService.kt$import fluxo.conf.impl.l import fluxo.conf.impl.v import javax.annotation.concurrent.ThreadSafe import org.gradle.api.logging.Logger import org.gradle.api.provider.ListProperty import org.gradle.api.services.BuildService import org.gradle.api.services.BuildServiceParameters</ID>
    <ID>ImportOrdering:TestReportsMergeTask.kt$import groovy.time.TimeCategory import java.io.FileOutputStream import java.util.Date import javax.xml.stream.XMLOutputFactory import org.gradle.api.DefaultTask import org.gradle.api.file.RegularFileProperty import org.gradle.api.provider.Property import org.gradle.api.services.ServiceReference import org.gradle.api.tasks.OutputFile import org.gradle.api.tasks.TaskAction import org.gradle.api.tasks.TaskExecutionException import org.gradle.api.tasks.testing.TestResult import org.gradle.work.DisableCachingByDefault</ID>
    <ID>ImportOrdering:VersionCatalogUtils.kt$import kotlin.internal.LowPriorityInOverloadResolution import org.gradle.api.GradleException import org.gradle.api.Project import org.gradle.api.artifacts.ExternalModuleDependencyBundle import org.gradle.api.artifacts.MinimalExternalModuleDependency import org.gradle.api.artifacts.VersionCatalog import org.gradle.api.artifacts.VersionCatalogsExtension import org.gradle.api.provider.Provider import org.gradle.plugin.use.PluginDependency</ID>
    <ID>ImportOrdering:WasmTarget.kt$import DEFAULT_COMMON_JS_CONFIGURATION as DEFAULT_CONF import fluxo.conf.dsl.container.KotlinTargetContainer import org.jetbrains.kotlin.gradle.dsl.KotlinTargetContainerWithWasmPresetFunctions import org.jetbrains.kotlin.gradle.targets.js.dsl.ExperimentalWasmDsl import org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinWasmJsTargetDsl import org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinWasmTargetDsl import org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinWasmWasiTargetDsl</ID>
    <ID>Indentation:FluxoConfigurationExtensionAndroidImpl.kt$FluxoConfigurationExtensionAndroidImpl$ </ID>
    <ID>Indentation:PropsAndEnv.kt$ </ID>
    <ID>Indentation:SetupKotlin.kt$ </ID>
    <ID>Indentation:SetupKotlinOptions.kt$ </ID>
    <ID>LongMethod:LoadAndApplyPluginIfNotApplied.kt$private fun FluxoKmpConfContext.loadPluginArtifactAndGetClass( pluginId: String, pluginVersion: String?, className: String?, catalogPluginAlias: String?, lookupClassName: Boolean, canLoadDynamically: Boolean, ): Class&lt;*&gt;?</ID>
    <ID>LongMethod:SetupAndroidLint.kt$internal fun Project.setupAndroidLint( conf: FluxoConfigurationExtensionImpl, ignoredBuildTypes: List&lt;String&gt;, ignoredFlavors: List&lt;String&gt;, )</ID>
    <ID>LongMethod:SetupKotlin.kt$internal fun configureKotlinJvm( type: ConfigurationType, configuration: FluxoConfigurationExtensionImpl, containers: Array&lt;Container&gt;, ): Boolean</ID>
    <ID>LongMethod:SetupPublication.kt$internal fun MavenPublication.setupPublicationPom( project: Project, context: FluxoKmpConfContext, config: FluxoPublicationConfig, useDokka: Boolean, )</ID>
    <ID>LongMethod:SetupTestsReport.kt$internal fun FluxoKmpConfContext.setupTestsReport()</ID>
    <ID>LongMethod:TestReportsMergeTask.kt$TestReportsMergeTask$@TaskAction fun merge()</ID>
    <ID>LongParameterList:SetupGradlePlugin.kt$( pluginName: String? = null, pluginClass: String? = null, displayName: String? = null, group: String? = this.group.toString().takeIf { it.isNotBlank() }, tags: List&lt;String&gt;? = null, pluginId: String? = if (pluginName != null &amp;&amp; group != null) "$group.$pluginName" else null, kotlin: (KotlinJvmProjectExtension.() -&gt; Unit)? = null, config: (FluxoConfigurationExtension.() -&gt; Unit)? = null, )</ID>
    <ID>LongParameterList:SetupIdeaPlugin.kt$( config: (FluxoConfigurationExtension.() -&gt; Unit)? = null, group: String? = null, version: String? = null, sinceBuild: String, intellijVersion: String, body: (KotlinJvmProjectExtension.() -&gt; Unit)? = null, )</ID>
    <ID>LoopWithTooManyJumpStatements:FluxoConfigurationExtensionImpl.kt$FluxoConfigurationExtensionImpl$while</ID>
    <ID>MagicNumber:SetupKotlin.kt$11</ID>
    <ID>MaxLineLength:DependencyGuardPlugin.kt$/** @see com.dropbox.gradle.plugins.dependencyguard.internal.ConfigurationValidators.isClasspathConfig */</ID>
    <ID>MaxLineLength:DependencyGuardPlugin.kt$/** @see com.dropbox.gradle.plugins.dependencyguard.internal.ConfigurationValidators.validatePluginConfiguration */</ID>
    <ID>MaxLineLength:DomainObjectUtils.kt$*</ID>
    <ID>MaxLineLength:KmpBuildConfigPlugin.kt$// A plugin for generating BuildConstants for any kind of Gradle projects: Java, Kotlin, Android, Groovy, etc.</ID>
    <ID>MaxLineLength:KotlinConfig.kt$// FIXME: Add env flag for dynamic switch-on when needed (and enable by a task name if called directly)</ID>
    <ID>MaxLineLength:LoadAndApplyPluginIfNotApplied.kt$"You may want to add it to the classpath in the root build.gradle.kts instead! $example"</ID>
    <ID>MaxLineLength:MergeDetektBaselinesTask.kt$MergeDetektBaselinesTask$*</ID>
    <ID>MaxLineLength:MergeDetektBaselinesTask.kt$MergeDetektBaselinesTask$manuallySuppressedIssues = acc.manuallySuppressedIssues + baseline.manuallySuppressedIssues</ID>
    <ID>MaxLineLength:PropsAndEnv.kt$if</ID>
    <ID>MaxLineLength:SetupJvmCompatibility.kt$(this as? ExtensionAware)</ID>
    <ID>MaxLineLength:SetupKotlinDependencies.kt$implementationAndLog(if (isApplication) dh.enforcedPlatform(it) else dh.platform(it))</ID>
    <ID>MaxLineLength:SetupKotlinOptions.kt$if</ID>
    <ID>MaxLineLength:SetupMultiplatform.kt$*</ID>
    <ID>MaxLineLength:SetupTestsReport.kt$description = "Combines all tests reports from all modules to the published root one"</ID>
    <ID>MaxLineLength:SetupTestsReport.kt$if</ID>
    <ID>MaxLineLength:VersionCatalogUtils.kt$internal</ID>
    <ID>MaximumLineLength:LoadAndApplyPluginIfNotApplied.kt$ </ID>
    <ID>MaximumLineLength:MergeDetektBaselinesTask.kt$MergeDetektBaselinesTask$ </ID>
    <ID>MaximumLineLength:PropsAndEnv.kt$ </ID>
    <ID>MaximumLineLength:SetupJvmCompatibility.kt$ </ID>
    <ID>MaximumLineLength:SetupKotlinDependencies.kt$ </ID>
    <ID>MaximumLineLength:SetupKotlinOptions.kt$ </ID>
    <ID>MaximumLineLength:SetupTestsReport.kt$ </ID>
    <ID>MaximumLineLength:VersionCatalogUtils.kt$internal</ID>
    <ID>MultiLineIfElse:DependencyPinningBundle.kt$for (alias in bundleAliases) { // Filter "pinned and "pinned.*" bundles alias.startsWith(ALIAS, ignoreCase = true) &amp;&amp; alias.run { val l = length l == ALIAS.length || l &gt; ALIAS.length &amp;&amp; this[ALIAS.length] == '.' } || continue val bundle = libs.b(alias)?.get() if (bundle.isNullOrEmpty()) { continue } logger.l("Pinning ${bundle.size} dependencies from version catalog bundle '$alias'") val reason = "$PIN_REASON from bundle '$alias'" for (dep in bundle) { val constraint = dep.versionConstraint.toString() with(rootProject) { logDependency("pinned", dep, " ('$alias' constraint)") } pinnedDeps[dep.module] = Pair(constraint, reason) } }</ID>
    <ID>NestedBlockDepth:DependencyPinningBundle.kt$internal fun FluxoKmpConfContext.prepareDependencyPinningBundle()</ID>
    <ID>NestedBlockDepth:KotlinSourceSetsReportTask.kt$KotlinSourceSetsReportTask.KotlinSourceSetsModel$fun buildTrees(): List&lt;GraphNode&gt;</ID>
    <ID>NestedBlockDepth:LoadAndApplyPluginIfNotApplied.kt$private fun FluxoKmpConfContext.getPluginIdAndVersion( id: String, version: String?, catalogPluginIds: Array&lt;out String&gt;? = null, catalogPluginId: String?, logger: Logger, catalogVersionIds: Array&lt;out String&gt;?, catalogVersionId: String?, ): Triple&lt;String, String?, String?&gt;</ID>
    <ID>NestedBlockDepth:LoadAndApplyPluginIfNotApplied.kt$private fun FluxoKmpConfContext.loadPluginArtifactAndGetClass( pluginId: String, pluginVersion: String?, className: String?, catalogPluginAlias: String?, lookupClassName: Boolean, canLoadDynamically: Boolean, ): Class&lt;*&gt;?</ID>
    <ID>NestedBlockDepth:SetupAndroidLint.kt$private fun Task.reportLintVersion(lintTool: LintTool?): Boolean</ID>
    <ID>NestedBlockDepth:SetupKotlin.kt$internal fun configureKotlinMultiplatform( configuration: FluxoConfigurationExtensionImpl, containers: Array&lt;Container&gt;, ): Boolean</ID>
    <ID>NestedBlockDepth:SetupPublication.kt$internal fun MavenPublication.setupPublicationPom( project: Project, context: FluxoKmpConfContext, config: FluxoPublicationConfig, useDokka: Boolean, )</ID>
    <ID>NestedBlockDepth:TestReportsMergeTask.kt$TestReportsMergeTask$@TaskAction fun merge()</ID>
    <ID>ReturnCount:KotlinSourceSetsReportTask.kt$KotlinSourceSetsReportTask.KotlinSourceSetsModel$private fun GraphNode.isReachableThrough(node: GraphNode): Boolean</ID>
    <ID>ReturnCount:KotlinSourceSetsReportTask.kt$KotlinSourceSetsReportTask.SourceSetNodeRenderer$context(StyledTextOutput) @Suppress("CyclomaticComplexMethod") override fun renderAttrs(node: RenderableNode, parent: RenderableNode?)</ID>
    <ID>ReturnCount:SetupAndroidLint.kt$private fun Task.reportLintVersion(lintTool: LintTool?): Boolean</ID>
    <ID>ReturnCount:SetupKotlinExperimentalTestCompilation.kt$internal fun KotlinTarget.setupExperimentalLatestCompilation( conf: FluxoConfigurationExtensionImpl, isMultiplatform: Boolean, )</ID>
    <ID>SwallowedException:DependencyHandlerUtils.kt$e: Throwable</ID>
    <ID>TooManyFunctions:LoggerUtils.kt$fluxo.conf.impl.LoggerUtils.kt</ID>
    <ID>UnusedPrivateMember:SetupAndroid.kt$private fun Project.configureMonkeyLauncherTasks()</ID>
    <ID>Wrapping:KotlinConfig.kt$(</ID>
  </CurrentIssues>
</SmellBaseline>
