<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ArgumentListWrapping:LoadAndApplyPluginIfNotApplied.kt$("Found plugin '$pluginId' class on the classpath for '${project.path}': $className")</ID>
    <ID>ComplexCondition:SetupTestsReport.kt$!enabled || mergedReportTask == null || mergedReportService == null || !isTestTaskAllowed()</ID>
    <ID>CyclomaticComplexMethod:LoadAndApplyPluginIfNotApplied.kt$private fun FluxoKmpConfContext.loadPluginArtifactAndGetClass( pluginId: String, pluginVersion: String?, className: String?, catalogPluginAlias: String?, lookupClassName: Boolean, canLoadDynamically: Boolean, project: Project, ): Class&lt;*>?</ID>
    <ID>CyclomaticComplexMethod:SetupAndroidLint.kt$internal fun Project.setupAndroidLint( conf: FluxoConfigurationExtensionImpl, ignoredBuildTypes: List&lt;String>, ignoredFlavors: List&lt;String>, )</ID>
    <ID>ForbiddenComment:AbstractMinificationTask.kt$// TODO: Move into a separate file, loaded from resources</ID>
    <ID>ForbiddenComment:AbstractMinificationTask.kt$AbstractMinificationTask$// FIXME: Move mapping to the output dir</ID>
    <ID>ForbiddenComment:AbstractMinificationTask.kt$AbstractMinificationTask$// TODO: Debugging</ID>
    <ID>ForbiddenComment:AbstractMinificationTask.kt$AbstractMinificationTask$// TODO: Process output and print only main information if not verbose</ID>
    <ID>ForbiddenComment:AndroidTarget.kt$AndroidTarget$// FIXME: Implement API for source sets.</ID>
    <ID>ForbiddenComment:AndroidTarget.kt$AndroidTarget.Configure$// TODO: Detect applied plugin (lib/app) and use appropriate container?</ID>
    <ID>ForbiddenComment:AppleIosTarget.kt$// FIXME: Public hierarchy of targets for easier configuration</ID>
    <ID>ForbiddenComment:ConfigureProguardTask.kt$// TODO: Allow to configure ProGuard version</ID>
    <ID>ForbiddenComment:ConfigureProguardTask.kt$// TODO: dProtect obfuscator</ID>
    <ID>ForbiddenComment:ContainerImpl.kt$ContainerImpl$// TODO: Utilize version available from PluginDependency</ID>
    <ID>ForbiddenComment:DependencyAnalysisPlugin.kt$// TODO: no need to declare transitive dependencies for the final app module</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Allow to customize configurations auto-filtration</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Allow to customize projects auto-filtration</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Opt-out configurable switch via `fluxoKmpConf { depsGuard = false }`</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Update when resolved (https://github.com/dropbox/dependency-guard/issues/3)</ID>
    <ID>ForbiddenComment:DependencyUtils.kt$// TODO: Support rich VersionConstraint</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionAndroidImpl.kt$FluxoConfigurationExtensionAndroidImpl$// TODO: Avoid casting</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionKotlin.kt$FluxoConfigurationExtensionKotlin$// FIXME: koverReport settings</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionPublicationImpl.kt$FluxoConfigurationExtensionPublicationImpl$// TODO: Add validation for value. Shouldn't be url, but `namespace/name`</ID>
    <ID>ForbiddenComment:FluxoKmpConfContext.kt$FluxoKmpConfContext$// TODO: Better integration with `gradle-idea-ext-plugin` or `idea` plugins.</ID>
    <ID>ForbiddenComment:FluxoKmpConfPlugin.kt$FluxoKmpConfPlugin$// TODO: Support version catalog declarations if available</ID>
    <ID>ForbiddenComment:FluxoPublicationConfig.kt$// TODO: Make an immutable resulting class</ID>
    <ID>ForbiddenComment:GetSetOfRequestedKmpTargets.kt$// TODO: Support "metadata_only"/metadataOnly mode (see arkivanov/gradle-setup-plugin)</ID>
    <ID>ForbiddenComment:KmpHierarchyTemplate.kt$// TODO: commonWasm group for wasmWasi and wasmJs</ID>
    <ID>ForbiddenComment:KmpTargetContainer.kt$KmpTargetContainer$// TODO: Create common bundle once and reuse?</ID>
    <ID>ForbiddenComment:KotlinConfig.kt$// TODO: Add env flag for dynamic switch-on when needed</ID>
    <ID>ForbiddenComment:KotlinSetupDiagnosticTasks.kt$// TODO: @DisableCachingByDefault(because = "Not worth caching")</ID>
    <ID>ForbiddenComment:KotlinSourceSetsReportTask.kt$// TODO: Mark source sets with deprectaed or 3rd tier targets</ID>
    <ID>ForbiddenComment:LoadAndApplyPluginIfNotApplied.kt$// TODO: Check version for correctness</ID>
    <ID>ForbiddenComment:MultiplatformSourceSetUtils.kt$// TODO: Create bundles once and reuse or at least make them lazy evaluatable.</ID>
    <ID>ForbiddenComment:NodeGraphsRenderer.kt$NodeGraphsRenderer.LegendRenderer$// FIXME: This is not implemented yet.</ID>
    <ID>ForbiddenComment:PropsAndEnv.kt$// TODO: Optimize, make lazy accessible via root project</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// FIXME: Implement cleaner 2-levels lazy API: asAndroidApp { android { ... } }</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// FIXME: Implement cleaner 2-levels lazy API: asAndroidLib { android { ... } }</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// TODO: Test for libraries bytecode.</ID>
    <ID>ForbiddenComment:SetupAndroidLint.kt$// TODO: Setup Lint for NonAndroid projects</ID>
    <ID>ForbiddenComment:SetupAndroidSigning.kt$// TODO: Support for ENV variables instead of file for more straightforward CI/CD</ID>
    <ID>ForbiddenComment:SetupArtifactsMinification.kt$// TODO: Support Android minification with ProGuard</ID>
    <ID>ForbiddenComment:SetupArtifactsMinification.kt$// TODO: Support KMP JVM target minification with ProGuard</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Disable non-resolving tasks if resolving version is available.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Use kotlin settings directly from the linked kotlin compilation task?</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// TODO: Add option to ignore baselines completely and fail on anything,</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// TODO: Improve detekt task platform detection.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$DetectedTaskPlatform$// TODO: Detect common/metadata tasks?</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: Check BuildConfig tasks (not called on IDE sync!)</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: Disambiguate existing javadoc and sources tasks</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: Spotless stup</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: check all features</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: detekt plugins https://detekt.dev/marketplace/</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: git hooks</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// FIXME: https://github.com/topjohnwu/libsu/blob/01570d643af91b0e271de018465a219eed8db322/service/build.gradle.kts#L21</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// TODO: Retry create pluginId from configuration if null?</ID>
    <ID>ForbiddenComment:SetupGradlePlugin.kt$// TODO: Try avoid this cast?</ID>
    <ID>ForbiddenComment:SetupKotlin.kt$// TODO: Check KSP setup for KMP modules</ID>
    <ID>ForbiddenComment:SetupKotlin.kt$// TODO: Detect if KMP is already applied and what targets are already configured.</ID>
    <ID>ForbiddenComment:SetupKotlinCompatibility.kt$// TODO: Detekt doesn't support 21 yet, enable when it does</ID>
    <ID>ForbiddenComment:SetupKotlinDependencies.kt$// TODO: Use `compileOnlyApi` for transitively included compile-only dependencies.</ID>
    <ID>ForbiddenComment:SetupKotlinDependencies.kt$// TODO: With coil-bom:2.2.2 doesn't work as enforcedPlatform for Android and/or KMP</ID>
    <ID>ForbiddenComment:SetupKotlinExperimentalTestCompilation.kt$// TODO: Find a solution for KMP 2.0</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// FIXME: Allow -Xjdk-release=1.6 with -jvm-target 1.8 once it is supported</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// FIXME: Move to JvmCompatibility?</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// FIXME: Move to KotlinConfig and configure in the context</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: Make conversion of Compose Compiler metrics to HTML automatically with Gradle.</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// FIXME: Disambiguate existing javadoc and sources tasks</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// FIXME: provide sources for KMP publications</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Add support for multiple developers</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Add support for multiple licenses</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Decorate the build logs with maven coordinates of published artifacts</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Distinguish between common and platform-specific publications</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Make configurable</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Protect publication tasks from invalid GIT state (dirty, untracked files, etc.)</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Replace Gradle Plugin publishing with something less broken (official is just a mess)?</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Set RC/alpha/beta releases status to Ivy's: milestone/integration when it will be possible</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Should wrap `setupPublicationExtension` in afterEvaluate?</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Warn only when assemble and/or publishing is really called.</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Freshmark</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Git pre-commit hook</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Licenses</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Only if java plugin is enabled?</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Use ktlint directly?</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: read base settings from .editorconfig ?</ID>
    <ID>ForbiddenComment:SetupTestsReport.kt$// TODO: Support Gradle before 8.0 (set service parameter and usesService) ?</ID>
    <ID>ForbiddenComment:SetupVerification.kt$// TODO: Test separate ktlint setup with gradle plugin</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// FIXME: Implement API for source sets.</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// TODO: provide a `setupParentSourceSet` with a single SourceSet arg</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// TODO: should androidUnitTestDebug depend on androidUnitTest?</ID>
    <ID>ImportOrdering:ExternalToolRunner.kt$import fluxo.util.alsoOutputTo import fluxo.gradle.ioFile import java.io.ByteArrayInputStream import java.io.File import java.time.LocalDateTime import java.time.format.DateTimeFormatter import org.gradle.api.GradleException import org.gradle.api.file.Directory import org.gradle.api.provider.Property import org.gradle.api.provider.Provider import org.gradle.process.ExecOperations import org.gradle.process.ExecResult</ID>
    <ID>Indentation:DependencyUpdatesPlugin.kt.kt$ </ID>
    <ID>Indentation:FluxoConfigurationExtensionAndroidImpl.kt$FluxoConfigurationExtensionAndroidImpl$ </ID>
    <ID>Indentation:PropsAndEnv.kt$ </ID>
    <ID>LongMethod:LoadAndApplyPluginIfNotApplied.kt$private fun FluxoKmpConfContext.loadPluginArtifactAndGetClass( pluginId: String, pluginVersion: String?, className: String?, catalogPluginAlias: String?, lookupClassName: Boolean, canLoadDynamically: Boolean, project: Project, ): Class&lt;*>?</ID>
    <ID>LongMethod:SetupAndroidLint.kt$internal fun Project.setupAndroidLint( conf: FluxoConfigurationExtensionImpl, ignoredBuildTypes: List&lt;String>, ignoredFlavors: List&lt;String>, )</ID>
    <ID>LongMethod:SetupTestsReport.kt$internal fun FluxoKmpConfContext.setupTestsReport()</ID>
    <ID>LongMethod:TestReportsMergeTask.kt$TestReportsMergeTask$@TaskAction fun merge()</ID>
    <ID>MaxLineLength:DependencyGuardPlugin.kt$/** @see com.dropbox.gradle.plugins.dependencyguard.internal.ConfigurationValidators.isClasspathConfig */</ID>
    <ID>MaxLineLength:DomainObjectUtils.kt$*</ID>
    <ID>MaxLineLength:LoadAndApplyPluginIfNotApplied.kt$"You may want to add it to the classpath in the root build.gradle.kts instead! $example"</ID>
    <ID>MaxLineLength:LoadAndApplyPluginIfNotApplied.kt$logger.v("Found plugin '$pluginId' class on the classpath for '${project.path}': $className")</ID>
    <ID>MaxLineLength:PropsAndEnv.kt$if</ID>
    <ID>MaxLineLength:SetupMultiplatform.kt$*</ID>
    <ID>MaxLineLength:SetupTestsReport.kt$description = "Combines all tests reports from all modules to the published root one"</ID>
    <ID>MaxLineLength:SetupTestsReport.kt$if</ID>
    <ID>MaxLineLength:VersionCatalogUtils.kt$internal</ID>
    <ID>MaximumLineLength:LoadAndApplyPluginIfNotApplied.kt$ </ID>
    <ID>MaximumLineLength:PropsAndEnv.kt$ </ID>
    <ID>MaximumLineLength:SetupTestsReport.kt$ </ID>
    <ID>MaximumLineLength:VersionCatalogUtils.kt$internal</ID>
    <ID>NestedBlockDepth:KotlinSourceSetsReportTask.kt$KotlinSourceSetsReportTask.KotlinSourceSetsModel$fun buildTrees(): List&lt;GraphNode></ID>
    <ID>NestedBlockDepth:LoadAndApplyPluginIfNotApplied.kt$private fun FluxoKmpConfContext.getPluginIdAndVersion( id: String, version: String?, catalogPluginIds: Array&lt;out String>? = null, catalogPluginId: String?, logger: Logger, catalogVersionIds: Array&lt;out String>?, catalogVersionId: String?, ): Triple&lt;String, String?, String?></ID>
    <ID>NestedBlockDepth:LoadAndApplyPluginIfNotApplied.kt$private fun FluxoKmpConfContext.loadPluginArtifactAndGetClass( pluginId: String, pluginVersion: String?, className: String?, catalogPluginAlias: String?, lookupClassName: Boolean, canLoadDynamically: Boolean, project: Project, ): Class&lt;*>?</ID>
    <ID>NestedBlockDepth:TestReportsMergeTask.kt$TestReportsMergeTask$@TaskAction fun merge()</ID>
    <ID>ReturnCount:KotlinSourceSetsReportTask.kt$KotlinSourceSetsReportTask.KotlinSourceSetsModel$private fun GraphNode.isReachableThrough(node: GraphNode): Boolean</ID>
    <ID>ReturnCount:KotlinSourceSetsReportTask.kt$KotlinSourceSetsReportTask.SourceSetNodeRenderer$context(StyledTextOutput) @Suppress("CyclomaticComplexMethod") override fun renderAttrs(node: RenderableNode, parent: RenderableNode?)</ID>
    <ID>SpreadOperator:ConfigureProguardTask.kt$(*coords)</ID>
    <ID>SpreadOperator:ConfigureProguardTask.kt$(*it)</ID>
    <ID>SpreadOperator:DetachedDependency.kt$( *dependencyNotations.mapToArray { dependencies.create(it) }, )</ID>
    <ID>SpreadOperator:ExternalToolRunner.kt$ExternalToolRunner$(*args.toTypedArray())</ID>
    <ID>SpreadOperator:GradleFileUtils.kt$(*dirs.ioFiles())</ID>
    <ID>SwallowedException:DependencyHandlerUtils.kt$e: Throwable</ID>
    <ID>UnusedPrivateMember:SetupAndroid.kt$private fun Project.configureMonkeyLauncherTasks()</ID>
  </CurrentIssues>
</SmellBaseline>
