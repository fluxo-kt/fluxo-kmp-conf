<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ArgumentListWrapping:ShrinkerReflectiveCaller.kt$ShrinkerReflectiveCaller$("$shrinker could not be loaded in-memory as $callType (class=$className)!")</ID>
    <ID>AvoidFirstOrLastOnList:AbstractShrinkerTask.kt$AbstractShrinkerTask$first</ID>
    <ID>AvoidFirstOrLastOnList:ParseJvmApiDump.kt$last</ID>
    <ID>AvoidFirstOrLastOnList:SetupJvmCompatibility.kt$first</ID>
    <ID>AvoidFirstOrLastOnList:ShrinkerReflectiveCaller.kt$ShrinkerReflectiveCaller$first</ID>
    <ID>CompilerWarning:DependencyAnalysisPlugin.kt$configureExtension</ID>
    <ID>CompilerWarning:KmpConfigurationContainerDslImpl.kt$KmpConfigurationContainerDslImpl$ExperimentalWasmDsl</ID>
    <ID>CompilerWarning:KotlinJsUtils.kt$compilerOptions</ID>
    <ID>CompilerWarning:KotlinSetupDiagnosticTasks.kt$targets</ID>
    <ID>CompilerWarning:SetupArtifactsProcessing.kt$API_DIR</ID>
    <ID>CompilerWarning:SetupArtifactsProcessing.kt$inputFiles</ID>
    <ID>CompilerWarning:SetupCompose.kt$KotlinCommonOptions</ID>
    <ID>CompilerWarning:SetupCompose.kt$enableIntrinsicRemember</ID>
    <ID>CompilerWarning:SetupCompose.kt$enableNonSkippingGroupOptimization</ID>
    <ID>CompilerWarning:SetupCompose.kt$enableStrongSkippingMode</ID>
    <ID>CompilerWarning:SetupCompose.kt$kotlinOptions</ID>
    <ID>CompilerWarning:SetupJvmCompatibility.kt$KCompilation</ID>
    <ID>CompilerWarning:SetupJvmCompatibility.kt$KotlinJvmOptions</ID>
    <ID>CompilerWarning:SetupKotlinCompatibility.kt$KotlinCommonOptions</ID>
    <ID>CompilerWarning:SetupKotlinCompatibility.kt$as?</ID>
    <ID>CompilerWarning:SetupKotlinExperimentalTestCompilation.kt$KCompilation</ID>
    <ID>CompilerWarning:SetupKotlinOptions.kt$KotlinCommonOptions</ID>
    <ID>CompilerWarning:SetupKotlinOptions.kt$KotlinJsOptions</ID>
    <ID>CompilerWarning:SetupKotlinOptions.kt$KotlinJvmOptions</ID>
    <ID>CompilerWarning:SetupPublication.kt$dirMode</ID>
    <ID>CompilerWarning:SetupPublication.kt$fileMode</ID>
    <ID>CompilerWarning:SetupTestsReport.kt$this is Test</ID>
    <ID>CompilerWarning:ShrinkerKeepRulesFromApiTask.kt$API_DIR</ID>
    <ID>CompilerWarning:TargetWasmContainer.kt$ExperimentalWasmDsl</ID>
    <ID>CompilerWarning:TargetWasmContainer.kt$TargetWasmContainer.Configure$ExperimentalWasmDsl</ID>
    <ID>CompilerWarning:TargetWasmContainer.kt$TargetWasmContainer.WasmJs$ExperimentalWasmDsl</ID>
    <ID>CompilerWarning:TargetWasmContainer.kt$TargetWasmContainer.WasmJs$wasm</ID>
    <ID>CompilerWarning:TargetWasmContainer.kt$TargetWasmContainer.WasmJs$wasmJs</ID>
    <ID>CompilerWarning:TargetWasmContainer.kt$TargetWasmContainer.WasmWasi$ExperimentalWasmDsl</ID>
    <ID>CompilerWarning:TargetWasmContainer.kt$TargetWasmContainer.WasmWasi$wasmWasi</ID>
    <ID>CompilerWarning:WasmTarget.kt$ExperimentalWasmDsl</ID>
    <ID>CompilerWarning:WasmTarget.kt$WasmTarget.Configure$ExperimentalWasmDsl</ID>
    <ID>CyclomaticComplexMethod:AbstractShrinkerTask.kt$AbstractShrinkerTask$@Suppress("LongMethod") private fun writeRootConfiguration( file: File, reportsDir: Directory, jarsConfigurationFile: File, shrinker: JvmShrinker, )</ID>
    <ID>DataClassTypedIDs:FluxoPublicationConfig.kt$FluxoPublicationConfig$public var developerId: String? = null</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$// TODO: Before Java 9, the runtime classes were packaged in a single jar file.</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$// TODO: Move into a separate file, loaded from resources</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// FIXME: Add automatic main class detection from the main jar manifest</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// FIXME: Benchmark and adjust best options for R8/ProGuard.</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// FIXME: Make all dirs to use the chain and id in chain!</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// FIXME: Setup JDK here from the toolchain or jvmTarget/jdk-release.</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// FIXME: When java toolchain used or JDK target is specified, read the specified JDK.</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// TODO: Can be cached for a JDK.</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// TODO: Debugging</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// TODO: Process output and print only main information if not verbose</ID>
    <ID>ForbiddenComment:AbstractShrinkerTask.kt$AbstractShrinkerTask$// TODO: Shared obfuscation dictionaries</ID>
    <ID>ForbiddenComment:AndroidTarget.kt$AndroidTarget$// FIXME: Implement API for source sets.</ID>
    <ID>ForbiddenComment:AndroidTarget.kt$AndroidTarget.Configure$// TODO: Detect applied plugin (lib/app) and use appropriate container?</ID>
    <ID>ForbiddenComment:ContainerImpl.kt$ContainerImpl$// TODO: Utilize version available from PluginDependency</ID>
    <ID>ForbiddenComment:DependencyAnalysisPlugin.kt$// TODO: no need to declare transitive dependencies for the final app module</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Allow to customize configurations auto-filtration</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Allow to customize projects auto-filtration</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Opt-out configurable switch via `fluxoKmpConf { depsGuard = false }`</ID>
    <ID>ForbiddenComment:DependencyGuardPlugin.kt$// TODO: Update when resolved (https://github.com/dropbox/dependency-guard/issues/3)</ID>
    <ID>ForbiddenComment:DependencyUtils.kt$// TODO: Support rich VersionConstraint</ID>
    <ID>ForbiddenComment:FkcSetupAndroid.kt$// FIXME: Implement cleaner 2-levels lazy API: asAndroidApp { android { ... } }</ID>
    <ID>ForbiddenComment:FkcSetupAndroid.kt$// FIXME: Implement cleaner 2-levels lazy API: asAndroidLib { android { ... } }</ID>
    <ID>ForbiddenComment:FkcSetupGradlePlugin.kt$// TODO: Retry create pluginId from configuration if null?</ID>
    <ID>ForbiddenComment:FkcSetupGradlePlugin.kt$// TODO: Support for multiple plugins</ID>
    <ID>ForbiddenComment:FkcSetupKotlin.kt$// TODO: Support JVM application with `application` plugin</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionAndroidImpl.kt$FluxoConfigurationExtensionAndroidImpl$// TODO: Avoid casting</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionKotlin.kt$FluxoConfigurationExtensionKotlin$// FIXME: koverReport settings</ID>
    <ID>ForbiddenComment:FluxoConfigurationExtensionPublicationImpl.kt$FluxoConfigurationExtensionPublicationImpl$// TODO: Add validation for githubProject value.</ID>
    <ID>ForbiddenComment:FluxoKmpConfContext.kt$FluxoKmpConfContext$// FIXME: Detekt and use here if CI (GitHub) debug logs are enabled.</ID>
    <ID>ForbiddenComment:FluxoKmpConfContext.kt$FluxoKmpConfContext$// TODO: Better integration with `gradle-idea-ext-plugin` or `idea` plugins.</ID>
    <ID>ForbiddenComment:FluxoKmpConfContext.kt$FluxoKmpConfContext$// TODO: GC stats</ID>
    <ID>ForbiddenComment:FluxoKmpConfPlugin.kt$FluxoKmpConfPlugin$// FIXME: Prepare lazy APIs to avoid afterEvaluate in such cases.</ID>
    <ID>ForbiddenComment:FluxoKmpConfPlugin.kt$FluxoKmpConfPlugin$// TODO: Support version catalog declarations if available</ID>
    <ID>ForbiddenComment:FluxoPublicationConfig.kt$// TODO: Make an immutable resulting class</ID>
    <ID>ForbiddenComment:GetSetOfRequestedKmpTargets.kt$// TODO: Support "metadata_only"/metadataOnly mode (see arkivanov/gradle-setup-plugin)</ID>
    <ID>ForbiddenComment:KmpTargetContainer.kt$KmpTargetContainer$// TODO: Create common bundle once and reuse?</ID>
    <ID>ForbiddenComment:KotlinConfigSetup.kt$// TODO: Add env flag for dynamic switch-on when needed</ID>
    <ID>ForbiddenComment:KotlinConfigSetup.kt$// TODO: Auto detect if `-Xjdk-release` actually can be used.</ID>
    <ID>ForbiddenComment:KotlinConfigSetup.kt$// TODO: Detect if JVM toolchains are already enabled in the project.</ID>
    <ID>ForbiddenComment:KotlinSourceSetsReportTask.kt$// TODO: Mark source sets with deprecated or 3rd tier targets</ID>
    <ID>ForbiddenComment:LoadAndApplyPluginIfNotApplied.kt$// TODO: Check version for correctness</ID>
    <ID>ForbiddenComment:MultiplatformSourceSetUtils.kt$// TODO: Create bundles once and reuse or at least make them lazy evaluatable.</ID>
    <ID>ForbiddenComment:NodeGraphsRenderer.kt$NodeGraphsRenderer.LegendRenderer$// FIXME: This is not implemented yet.</ID>
    <ID>ForbiddenComment:PropsAndEnv.kt$// FIXME: Called 3 times with same error when no git installed or global config error.</ID>
    <ID>ForbiddenComment:PropsAndEnv.kt$// FIXME: Consider using `GIT_BRANCH` (JitPack) or similar env var instead!</ID>
    <ID>ForbiddenComment:PropsAndEnv.kt$// FIXME: Consider using `GIT_COMMIT` (JitPack) or similar env var instead!</ID>
    <ID>ForbiddenComment:PropsAndEnv.kt$// FIXME: Don't allow commit/branch for the release.</ID>
    <ID>ForbiddenComment:PropsAndEnv.kt$// FIXME: Don't check tag for the snapshot publication.</ID>
    <ID>ForbiddenComment:PropsAndEnv.kt$// TODO: Optimize, make lazy accessible via root project including current branch name</ID>
    <ID>ForbiddenComment:RegisterShrinkerTask.kt$// FIXME: Avoid duplicate logging between similar tasks</ID>
    <ID>ForbiddenComment:RegisterShrinkerTask.kt$// TODO: note dependency in the (root?) project classpath</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// FIXME: Automatic per-app language support</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// FIXME: Support Kotlin bundled Compose compiler since Kotlin 2.0.0-RC2.</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// TODO: Support bundletool codeTransparency here.</ID>
    <ID>ForbiddenComment:SetupAndroid.kt$// TODO: Test for libraries bytecode.</ID>
    <ID>ForbiddenComment:SetupAndroidLint.kt$// TODO: Cache the Lint configuration file?</ID>
    <ID>ForbiddenComment:SetupAndroidLint.kt$// TODO: Check variantName instead of the task name?</ID>
    <ID>ForbiddenComment:SetupAndroidSigning.kt$// TODO: Support for ENV variables instead of file for more straightforward CI/CD</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Check 'reproducibleArtifacts' with shrinker enabled.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Create a marker task for the main processing chain with a stable name.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Ensure the obfuscation mapping incrementality and compatibility when double-shrinking.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Provide unporcessed artifacts alongside the processed ones as a variant.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Publish the debug non-shrunken artifacts alongside the release shrunken ones.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Run tests with minified artifacts.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Shrinkers loose JARs reproducibility,</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Support KMP JVM target minification with ProGuard.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Support auto-loading of the shrinking rules from the classpath for the ProGuard.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Support final artifact filtration step similar to the Android packaging options.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Support other shadowing/relocation processors in the chain.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Support shadow jar generation before shrinking artifacts.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// FIXME: Verify proper replacement of the original artifact with the processed one (map by file?).</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// TODO: Allow to call shrinker by task name even if it's disabled.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// TODO: Support Android minification with Fluxo processing chain.</ID>
    <ID>ForbiddenComment:SetupArtifactsProcessing.kt$// TODO: Support auto-disabling kotlin null checks generation for the shrunken release builds.</ID>
    <ID>ForbiddenComment:SetupCompose.kt$// TODO: Make Compose Compiler metrics in HTML automatically with Gradle.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Disable Detekt for the experimentalLatest test compilation.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Disable non-resolving tasks if resolving version is available.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Setup checks for the non source set kotlin files (e.g., *.kts scripts).</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Setup the "InvalidPackageDeclaration" rule for each module,</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Setup the light-weight mode for the git hooks, to run only on the changed files.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// FIXME: Use kotlin settings directly from the linked kotlin compilation task?</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// TODO: Add option to ignore baselines completely and fail on anything,</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// TODO: Cache the config dir?</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$// TODO: Improve detekt task platform detection.</ID>
    <ID>ForbiddenComment:SetupDetekt.kt$DetectedTaskPlatform$// TODO: Detect common/metadata tasks?</ID>
    <ID>ForbiddenComment:SetupKotlin.kt$// FIXME: Configure common compilerOptions via KotlinProjectExtension.compilerOptions</ID>
    <ID>ForbiddenComment:SetupKotlin.kt$// TODO: Check KSP setup for KMP modules</ID>
    <ID>ForbiddenComment:SetupKotlin.kt$// TODO: Detect if KMP is already applied and what targets are already configured.</ID>
    <ID>ForbiddenComment:SetupKotlinDependencies.kt$// TODO: Use `compileOnlyApi` for transitively included compile-only dependencies.</ID>
    <ID>ForbiddenComment:SetupKotlinDependencies.kt$// TODO: With coil-bom:2.2.2 doesn't work as enforcedPlatform for Android and/or KMP</ID>
    <ID>ForbiddenComment:SetupKotlinExperimentalTestCompilation.kt$// TODO: Find a solution for KMP 2.0</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// FIXME: Move to JvmCompatibility?</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: -Xwasm-use-new-exception-proposal</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: Allow -Xjdk-release=1.6 with -jvm-target 1.8 for Kotlin 2.0+</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: Guard conditions for when-with-subject (Kotlin 2.0.20)</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: Support for -Xemit-jvm-type-annotations</ID>
    <ID>ForbiddenComment:SetupKotlinOptions.kt$// TODO: Verify ct.sym fix later.</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// FIXME: Disambiguate existing javadoc and sources tasks</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// FIXME: provide sources for KMP publications</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Add support for multiple developers</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Add support for multiple licenses</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Avoid publication setup when possible</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Decorate the build logs with maven coordinates of published artifacts</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Distinguish between common and platform-specific publications</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Make configurable (sanitize/verify)</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Protect publication tasks from invalid GIT state (dirty, untracked files, etc.)</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Replace Gradle Plugin publishing with something less broken (official is just a mess)?</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Set RC/alpha/beta releases status to Ivy's: milestone/integration when it will be possible</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Should wrap `setupPublicationExtension` in afterEvaluate?</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Take jar tasks from project outputs instead of tasks?</ID>
    <ID>ForbiddenComment:SetupPublication.kt$// TODO: Warn only when assemble and/or publishing is really called.</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Freshmark</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Git pre-commit hook</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Licenses</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Only if java plugin is enabled?</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: Use ktlint directly?</ID>
    <ID>ForbiddenComment:SetupSpotless.kt$// TODO: read base settings from .editorconfig ?</ID>
    <ID>ForbiddenComment:SetupTestsReport.kt$// TODO: Support Gradle before 8.0 (set service parameter and usesService) ?</ID>
    <ID>ForbiddenComment:SetupValidatePluginTasks.kt$// TODO: Multiset configuration</ID>
    <ID>ForbiddenComment:SetupVerification.kt$// FIXME: Setup Android Lint for non-Android targets in KMP</ID>
    <ID>ForbiddenComment:SetupVerification.kt$// TODO: Test separate ktlint setup with gradle plugin</ID>
    <ID>ForbiddenComment:ShrinkerKeepRulesFromApiTask.kt$ShrinkerKeepRulesFromApiTask$// FIXME: Warn on data classes in public API!</ID>
    <ID>ForbiddenComment:ShrinkerKeepRulesFromApiTask.kt$ShrinkerKeepRulesFromApiTask$// TODO: Optionally keep $EntriesMappings and $DefaultImpls classes</ID>
    <ID>ForbiddenComment:ShrinkerKeepRulesFromApiTask.kt$ShrinkerKeepRulesFromApiTask$// TODO: auto-detect synthetic methods that can be removed from the rules.</ID>
    <ID>ForbiddenComment:ShrinkerTestBase.kt$// TODO: Optimized bytcode tests.</ID>
    <ID>ForbiddenComment:ShrinkerVerificationTestTask.kt$ShrinkerVerificationTestTask.ShrinkerVerificationTest$// TODO: Verify the jar itself (artifact signature, reproducibility, etc.)</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// FIXME: Implement API for source sets.</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// TODO: provide a `setupParentSourceSet` with a single SourceSet arg</ID>
    <ID>ForbiddenComment:TargetAndroidContainer.kt$TargetAndroidContainer$// TODO: should androidUnitTestDebug depend on androidUnitTest?</ID>
    <ID>ForbiddenComment:TomlResultCatalog.kt$TomlResultCatalog$// TODO: Parse bundles</ID>
    <ID>ForbiddenComment:VerifyApiWithReflection.kt$// TODO: Check parent classes and interfaces.</ID>
    <ID>ForbiddenPublicDataClass:FluxoPublicationConfig.kt$FluxoPublicationConfig</ID>
    <ID>Indentation:DependencyUpdatesPlugin.kt.kt$ </ID>
    <ID>Indentation:FluxoConfigurationExtensionAndroidImpl.kt$FluxoConfigurationExtensionAndroidImpl$ </ID>
    <ID>LongMethod:SetupPublication.kt$private fun FluxoKmpConfContext.setupPublicationRepositoryAndSigning( p: Project, config: FluxoPublicationConfig, publishing: PublishingExtension, mavenRepo: Boolean = true, )</ID>
    <ID>LongMethod:TestReportsMergeTask.kt$TestReportsMergeTask$@TaskAction fun merge()</ID>
    <ID>MagicNumber:SetupDetekt.kt$2.1</ID>
    <ID>MaxLineLength:ShrinkerReflectiveCaller.kt$ShrinkerReflectiveCaller$logger.w("$shrinker could not be loaded in-memory as $callType (class=$className)!")</ID>
    <ID>MaximumLineLength:ShrinkerReflectiveCaller.kt$ShrinkerReflectiveCaller$ </ID>
    <ID>MutableTypeShouldBePrivate:LoadAndApplyPluginIfNotApplied.kt$val classNames: MutableSet&lt;String></ID>
    <ID>NestedBlockDepth:ShrinkerReflectiveCaller.kt$ShrinkerReflectiveCaller$@Suppress("ReturnCount") fun execute( callType: ProcessorCallType, ignoreMemoryLimit: Boolean = false, ): Boolean</ID>
    <ID>NestedBlockDepth:TestReportsMergeTask.kt$TestReportsMergeTask$@TaskAction fun merge()</ID>
    <ID>NoNotNullOperator:AbstractShrinkerTask.kt$AbstractShrinkerTask$callFallbackOrder.last()!!</ID>
    <ID>ReturnCount:SetupArtifactsProcessing.kt$@Suppress("CyclomaticComplexMethod", "LongMethod") internal fun setupArtifactsProcessing( conf: FluxoConfigurationExtensionImpl, )</ID>
    <ID>SpacingAroundComma:SetupAndroid.kt$,</ID>
    <ID>SpreadOperator:GradleFileUtils.kt$(*dirs.ioFiles())</ID>
    <ID>TooManyFunctions:SetupJvmCompatibility.kt$fluxo.conf.impl.kotlin.SetupJvmCompatibility.kt</ID>
    <ID>UnnecessaryPassThroughClass:InteroperabilityUtils.kt$KotlinClosure2&lt;in T, in U, V : Any> : Closure</ID>
    <ID>UnnecessaryPassThroughClass:KotlinMultiplatformActionContainer.kt$KotlinMultiplatformActionContainer : CustomTypeContainerContainerKotlinMultiplatformAware</ID>
    <ID>UnnecessaryPassThroughClass:KotlinProjectActionContainer.kt$KotlinProjectActionContainer : CustomTypeContainerContainerKotlinAware</ID>
    <ID>UnusedPrivateMember:SetupAndroid.kt$private fun Project.configureMonkeyLauncherTasks()</ID>
    <ID>UnusedPrivateProperty:SetupDetekt.kt$private const val DETEKT_MAX_SUPPORTED_KOTLIN_VERSION = "2.1"</ID>
  </CurrentIssues>
</SmellBaseline>
