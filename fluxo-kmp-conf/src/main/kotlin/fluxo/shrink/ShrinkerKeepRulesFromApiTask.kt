package fluxo.shrink

import fluxo.conf.feat.API_DIR
import fluxo.conf.feat.bindToApiDumpTasks
import fluxo.conf.impl.l
import fluxo.conf.impl.register
import fluxo.conf.impl.w
import fluxo.gradle.ioFile
import javax.inject.Inject
import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.file.ProjectLayout
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.tasks.CacheableTask
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.PathSensitive
import org.gradle.api.tasks.PathSensitivity
import org.gradle.api.tasks.SkipWhenEmpty
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.TaskProvider
import org.gradle.work.NormalizeLineEndings

/**
 * Auto-generates shrinker keep rules from API reports.
 */
@CacheableTask
internal abstract class ShrinkerKeepRulesFromApiTask : DefaultTask() {

    @get:Inject
    protected abstract val layout: ProjectLayout

    @get:InputFiles
    @get:SkipWhenEmpty
    @get:NormalizeLineEndings
    @get:PathSensitive(PathSensitivity.RELATIVE)
    abstract val generatedDefinitions: ConfigurableFileCollection

    @get:OutputFile
    abstract val outputFile: RegularFileProperty

    @TaskAction
    operator fun invoke() {
        val files = generatedDefinitions.files
        if (files.isEmpty()) {
            logger.w("No API reports found, skipping")
            return
        }

        val projectDir = layout.projectDirectory.asFile
        if (KEEP_RULES_GEN_DBG) {
            val separator = "\n\t-> "
            val filesForLog = files.joinToString(separator = separator, prefix = separator) {
                it.toRelativeString(projectDir)
            }
            logger.l("Generating shrinker keep rules from API reports:$filesForLog")
        }

        // 1. read files and parse the Kotlin APIs format.
        @Suppress("MagicNumber")
        val signatures = LinkedHashMap<String, ClassSignature>(64)
        files.forEach { file ->
            file.bufferedReader().use { it.parseJvmApiDumpTo(signatures) }
        }

        // 2. write as ProGuard keep rules.
        //  https://www.guardsquare.com/manual/configuration/usage#classspecification
        val outputFile = outputFile.ioFile
        outputFile.parentFile.mkdirs()
        outputFile.bufferedWriter().use { writer ->
            writer.appendLine()
            writer.appendLine("# ProGuard/R8 keep rules")
            writer.appendLine("# Auto-generated by Fluxo task :$name from API reports:")
            for (file in files) {
                writer.appendLine("# - ${file.toRelativeString(projectDir)}")
            }
            writer.appendLine("# DO NOT EDIT MANUALLY!")
            writer.appendLine()

            signatures.values.forEach { signature ->
                signature.writeTo(writer)
                writer.appendLine()
            }
        }
    }
}

internal fun Project.registerShrinkerKeepRulesGenTask(
): TaskProvider<ShrinkerKeepRulesFromApiTask> {
    return tasks.register<ShrinkerKeepRulesFromApiTask>(SHRINKER_KEEP_GEN_TASK_NAME) {
        group = FLUXO_TASK_GROUP
        description = "Generates shrinker (R8/ProGuard) keep rules from API reports"

        val project = project
        val projectDir = project.layout.projectDirectory
        val apiFiles = project.fileTree(projectDir.dir(API_DIR)).matching {
            include("**/*.api")
        }
        generatedDefinitions.setFrom(apiFiles)
        outputFile.set(projectDir.file("pg/keep-api-autogenerated.pro"))
    }.also {
        it.bindToApiDumpTasks()
    }
}

internal const val SHRINKER_KEEP_GEN_TASK_NAME = "generateShrinkerKeepRulesFromApi"

internal const val FLUXO_TASK_GROUP = "fluxo"
